using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Navigation;

// The Blank Page item template is documented at http://go.microsoft.com/fwlink/?LinkId=234238

namespace TpmRcDecoder
{
    public struct TPMCommandDescription
    {
        public uint Ordinal;
        public string Name;
        public string Description;

        public TPMCommandDescription(uint ordinal, string name, string description)
        {
            Ordinal = ordinal;
            Name = name;
            Description = description;
        }
    };

    /// <summary>
    /// An empty page that can be used on its own or navigated to within a Frame.
    /// </summary>
    public sealed partial class CommandCodes : Page
    {
        private readonly NavigationHelper m_NavigationHelper;
        private const string m_SettingCommandCode = "ccCC";
        private const string m_DefaultDescription = "TPM command description.";
        private const string m_InvalidCommandDescription = "Invalid command code for TPM.";
        private static TPMCommandDescription[] m_TPM12Commands =
        {
            // " ([0-9HS<>]{1,3} ){2,4}[A-Z_0-9]*(\[ \])? "
            // "\n" +\n              "  "
            new TPMCommandDescription( 0x0000000A, "TPM_ORD_OIAP", "Input:\n" +
                "  None.\n" +
                "\nOutput:\n" +
                "  authHandle - Handle that TPM creates that points to the authorization state.\n" +
                "  nonceEven - Nonce generated by the TPM and associated with the session.\n" +
                "\nDescription:\n" +
                "  The TPM_OIAP command allows the creation of an authorization session handle and the tracking of the handle by the TPM. The TPM generates the handle and nonce.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 18.1"),
            new TPMCommandDescription( 0x0000000B, "TPM_ORD_OSAP", "Input:\n" +
                "  entityType - The type of entity to use\n" +
                "  entityValue - The selection value based on entityType, e.g. a keyHandle #\n" +
                "  nonceOddOSAP - The nonce generated by the caller associated with the shared secret\n" +
                "\nOutput:\n" +
                "  authHandle - Handle that TPM creates that points to the authorization state.\n" +
                "  nonceEven - Nonce generated by TPM and associated with session.\n" +
                "  nonceEvenOSAP - Nonce generated by TPM and associated with shared secret.\n" +
                "\nDescription:\n" +
                "  The TPM_OSAP command allows the creation of an authorization session handle" +
                " and the tracking of the handle by the TPM.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 18.2"),
            new TPMCommandDescription( 0x0000000C, "TPM_ORD_ChangeAuth", "Input:\n" +
                "  parentHandle - Handle of the parent key to the entity.\n" +
                "  protocolID - The protocol in use.\n" +
                "  newAuth - The encrypted new AuthData for the entity\n" +
                "  entityType - The type of entity to be modified\n" +
                "  encDataSize - The size of the encData parameter\n" +
                "  encData - The encrypted entity that is to be modified.\n" +
                "  parentAuthHandle - The authorization session handle used for the parent key.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with parentAuthHandle\n" +
                "  continueAuthSession - Ignored, parentAuthHandle is always terminated.\n" +
                "  parentAuth - The authorization session digest for inputs and parentHandle. HMAC key: parentKey.usageAuth.\n" +
                "  entityAuthHandle - The authorization session handle used for the encrypted entity. The session type MUST be OIAP\n" +
                "  entitylastNonceEven - Even nonce previously generated by TPM\n" +
                "  entitynonceOdd - Nonce generated by system associated with entityAuthHandle\n" +
                "  continueEntitySession - Ignored, entityAuthHandle is always terminated.\n" +
                "  entityAuth - The authorization session digest for the inputs and encrypted entity. HMAC key: entity.usageAuth.\n" +
                "\nOutput:\n" +
                "  outDataSize - The used size of the output area for outData\n" +
                "  outData - The modified, encrypted entity.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with parentAuthHandle\n" +
                "  continueAuthSession - Continue use flag, fixed value of FALSE\n" +
                "  resAuth - The authorization session digest for the returned parameters and parentHandle.HMAC key: parentKey.usageAuth.\n" +
                "  entityNonceEven - Even nonce newly generated by TPM to cover entity\n" +
                "  entitynonceOdd - Nonce generated by system associated with entityAuthHandle\n" +
                "  continueEntitySession - Continue use flag, fixed value of FALSE\n" +
                "  entityAuth - The authorization session digest for the returned parameters and entity.HMAC key: entity.usageAuth, the original and not the new auth value\n" +
                "\nDescription:\n" +
                "  The TPM_ChangeAuth command allows the owner of an entity to change the AuthData for the entity.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 17.1" ),
            new TPMCommandDescription( 0x0000000D, "TPM_ORD_TakeOwnership", "Input:\n" +
                "  protocolID - The ownership protocol in use.\n" +
                "  encOwnerAuthSize - The size of the encOwnerAuth field\n" +
                "  encOwnerAuth - The owner AuthData encrypted with PUBEK\n" +
                "  encSrkAuthSize - The size of the encSrkAuth field\n" +
                "  encSrkAuth - The SRK AuthData encrypted with PUBEK\n" +
                "  srkParams - Structure containing all parameters of new SRK. pubKey.keyLength & encSize are both 0. This structure MAY be TPM_KEY12.\n" +
                "  authHandle - The authorization session handle used for this command\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - Authorization session digest for input params. HMAC key: the new ownerAuth value. See actions for validation operations\n" +
                "\nOutput:\n" +
                "  srkPub - Structure containing all parameters of new SRK. srkPub.encData is set to 0. This structure MAY be TPM_KEY12.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: the new ownerAuth value\n" +
                "\nDescription:\n" +
                "  This command inserts the TPM Ownership value into the TPM.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 6.1" ),
            new TPMCommandDescription( 0x0000000E, "TPM_ORD_ChangeAuthAsymStart", "Input:\n" +
                "  idHandle - The keyHandle identifier of a loaded identity ID key\n" +
                "  antiReplay - The nonce to be inserted into certifyInfo structure.\n" +
                "  tempKey - Structure contains all parameters of ephemeral key.\n" +
                "  authHandle - The authorization session handle used for idHandle authorization.\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle.\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle.\n" +
                "  idAuth - Authorization. HMAC key: idKey.usageAuth.\n" +
                "\nOutput:\n" +
                "  certifyInfo - The certifyInfo structure that is to be signed.\n" +
                "  sigSize - The used size of the output area for the signature.\n" +
                "  sig - The signature of teh certifyInfo parameter.\n" +
                "  ephHandle - the keyHandle identifier to be used by ChangeAuthAsymFinish for the ephemeral key.\n" +
                "  tempKey - Structure containing all parameters and public part of ephemeral key. TPM_KEY.encSize is set to 0.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs.\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle.\n" +
                "  continueAuthSession - Continue use flag. TRUE if handle is still active.\n" +
                "  resAuth - Authorization. HMAC key: idKey.usageAuth.\n" +
                "\nDescription:\n" +
                "  The command start the process of changing AuthData for an entity.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 27.4.1" ),
            new TPMCommandDescription( 0x0000000F, "TPM_ORD_ChangeAuthAsymFinish", "Input:\n" +
                "  parentHandle - The keyHandle of the parent key for the input data\n" +
                "  ephHandle - The keyHandle identifier for the ephemeral key\n" +
                "  entityType - The type of entity to be modified\n" +
                "  newAuthLink - HMAC calculation that links the old and new AuthData values together\n" +
                "  newAuthSize - Size of encNewAuth\n" +
                "  encNewAuth - New AuthData encrypted with ephemeral key.\n" +
                "  encDataSize - The size of the inData parameter\n" +
                "  encData - The encrypted entity that is to be modified.\n" +
                "  authHandle - Authorization for parent key.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  privAuth - The authorization session digest for inputs and parentHandle. HMAC key: parentKey.usageAuth.\n" +
                "\nOutput:\n" +
                "  outDataSize - The used size of the output area for outData\n" +
                "  outData - The modified, encrypted entity.\n" +
                "  saltNonce - A nonce value from the TPM RNG to add entropy to the changeProof value\n" +
                "  changeProof - Proof that AuthData has changed.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: parentKey.usageAuth.\n" +
                "\nDescription:\n" +
                "  The TPM_ChangeAuthAsymFinish command allows the owner of an entity to change the AuthData for the entity.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 27.4.2" ),
            new TPMCommandDescription( 0x00000010, "TPM_ORD_ChangeAuthOwner", "Input:\n" +
                "  protocolID - The protocol in use.\n" +
                "  newAuth - The encrypted new AuthData for the entity\n" +
                "  entityType - The type of entity to be modified\n" +
                "  ownerAuthHandle - The authorization session handle used for the TPM Owner.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with ownerAuthHandle\n" +
                "  continueAuthSession - Continue use flag the TPM ignores this value\n" +
                "  ownerAuth - The authorization session digest for inputs and ownerHandle. HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with ownerAuthHandle\n" +
                "  continueAuthSession - Continue use flag, fixed value of FALSE\n" +
                "  resAuth - The authorization session digest for the returned parameters and ownerHandle. HMAC key: ownerAuth, the original value and not the new auth value" +
                "\nDescription:\n" +
                "  The TPM_ChangeAuthOwner command allows the owner of an entity to change the AuthData for the TPM Owner or the SRK.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 17.2" ),
            new TPMCommandDescription( 0x00000011, "TPM_ORD_DSAP", "Input:\n" +
                "  entityType - The type of delegation information to use\n" +
                "  keyHandle - Key for which delegated authority corresponds, or 0 if delegated owner activity. Only relevant if entityValue equals TPM_DELEGATE_KEY_BLOB\n" +
                "  nonceOddDSAP - The nonce generated by the caller associated with the shared secret.\n" +
                "  entityValueSize - The size of entityValue.\n" +
                "  entityValue - TPM_DELEGATE_KEY_BLOB or TPM_DELEGATE_OWNER_BLOB or index MUST not be empty. If entityType is TPM_ET_DEL_ROW then entityValue is a TPM_DELEGATE_INDEX\n" +
                "\nOutput:\n" +
                "  authHandle - Handle that TPM creates that points to the authorization state.\n" +
                "  nonceEven - Nonce generated by TPM and associated with session.\n" +
                "  nonceEvenDSAP - Nonce generated by TPM and associated with shared secret.\n" +
                "\nDescription:\n" +
                "  The TPM_DSAP command creates the authorization session handle using a delegated AuthData value passed into the command as an encrypted blob or from the internal delegation table. It can be used to start an authorization session for a user key or the owner.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 18.3" ),
            new TPMCommandDescription( 0x00000012, "TPM_ORD_CMK_CreateTicket", "Input:\n" +
                "  verificationKey - The public key to be used to check signatureValue\n" +
                "  signedData - The data to be verified\n" +
                "  signatureValueSize - The size of the signatureValue\n" +
                "  signatureValue - The signatureValue to be verified\n" +
                "  authHandle - The authorization session handle used for owner authentication. 2H\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Ignored\n" +
                "  pubAuth - The authorization session digest for inputs and owner. HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  sigTicket - Ticket - that proves digest created on this TPM\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag\n" +
                "  resAuth - Authorization. HMAC key:. ownerAuth." +
                "\nDescription:\n" +
                "  The TPM_CMK_CreateTicket command uses a public key to verify the signature over a digest.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 11.8" ),
            new TPMCommandDescription( 0x00000013, "TPM_ORD_CMK_CreateKey", "Input:\n" +
                "  parentHandle - Handle of a loaded key that can perform key wrapping.\n" +
                "  dataUsageAuth - Encrypted usage AuthData for the key.\n" +
                "  keyInfo - Information about key to be created, pubkey.keyLength and keyInfo.encData elements are 0. MUST be TPM_KEY\n" +
                "  migrationAuthorityApproval - A ticket, created by the TPM Owner using TPM_CMK_ApproveMA, approving a TPM_MSA_COMPOSITE structure\n" +
                "  migrationAuthorityDigest - The digest of a TPM_MSA_COMPOSITE structure\n" +
                "  authHandle - The authorization session handle used for parent key authorization. Must be an OSAP session.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Ignored\n" +
                "  pubAuth - The authorization session digest that authorizes the use of the public key in parentHandle. HMAC key: parentKey.usageAuth.\n" +
                "\nOutput:\n" +
                "  wrappedKey - The TPM_KEY structure which includes the public and encrypted private key. MUST be TPM_KEY\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, fixed at FALSE\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: parentKey.usageAuth.\n" +
                "\nDescription:\n" +
                "  The TPM_CMK_CreateKey command both generates and creates a secure storage bundle for asymmetric keys whose migration is controlled by a migration authority.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 11.7" ),
            new TPMCommandDescription( 0x00000014, "TPM_ORD_Extend", "Input:\n" +
                "  pcrNum - The PCR to be updated.\n" +
                "  inDigest - The 160 bit value representing the event to be recorded.\n" +
                "\nOutput:\n" +
                "  outDigest - The PCR value after execution of the command.\n" +
                "\nDescription:\n" +
                "  This adds a new measurement to a PCR.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 16.1" ),
            new TPMCommandDescription( 0x00000015, "TPM_ORD_PcrRead", "Input:\n" +
                "  pcrIndex - Index of the PCR to be read\n" +
                "\nOutput:\n" +
                "  outDigest - The current contents of the named PCR\n" +
                "\nDescription:\n" +
                "  The TPM_PCRRead operation provides non-cryptographic reporting of the contents of a named PCR.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 16.2" ),
            new TPMCommandDescription( 0x00000016, "TPM_ORD_Quote", "Input:\n" +
                "  pcrIndex - Index of the PCR to be read\n" +
                "\nOutput:\n" +
                "  outDigest - The current contents of the named PCR\n" +
                "\nDescription:\n" +
                "  The TPM_PCRRead operation provides non-cryptographic reporting of the contents of a named PCR.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 16.2" ),
            new TPMCommandDescription( 0x00000017, "TPM_ORD_Seal", "Input:\n" +
                "  keyHandle - Handle of a loaded key that can perform seal operations.\n" +
                "  encAuth - The encrypted AuthData for the sealed data.\n" +
                "  pcrInfoSize - The size of the pcrInfo parameter. If 0 there are no PCR registers in use\n" +
                "  pcrInfo - The PCR selection information. The caller MAY use TPM_PCR_INFO_LONG.\n" +
                "  inDataSize - The size of the inData parameter\n" +
                "  inData - The data to be sealed to the platform and any specified PCRs\n" +
                "  authHandle - The authorization session handle used for keyHandle authorization. Must be an OSAP session for this command.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Ignored\n" +
                "  pubAuth - The authorization session digest for inputs and keyHandle. HMAC key: key.usageAuth.\n" +
                "\nOutput:\n" +
                "  sealedData - Encrypted, integrity-protected data object that is the result of the TPM_Seal operation.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, fixed value of FALSE\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: key.usageAuth.\n" +
                "\nDescription:\n" +
                "  The SEAL operation allows software to explicitly state the future “trusted” configuration that the platform must be in for the secret to be revealed.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 10.1" ),
            new TPMCommandDescription( 0x00000018, "TPM_ORD_Unseal", "Input:\n" +
                "  parentHandle - Handle of a loaded key that can unseal the data.\n" +
                "  inData - The encrypted data generated by TPM_Seal.\n" +
                "  authHandle - The authorization session handle used for parentHandle.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  parentAuth - The authorization session digest for inputs and parentHandle. HMAC key: parentKey.usageAuth.\n" +
                "  dataAuthHandle - The authorization session handle used to authorize inData.\n" +
                "  dataLastNonceEven - Even nonce previously generated by TPM\n" +
                "  datanonceOdd - Nonce generated by system associated with entityAuthHandle\n" +
                "  continueDataSession - Continue usage flag for dataAuthHandle.\n" +
                "  dataAuth - The authorization session digest for the encrypted entity. HMAC key: entity.usageAuth.\n" +
                "\nOutput:\n" +
                "  secretSize - The used size of the output area for secret\n" +
                "  secret - Decrypted data that had been sealed\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: parentKey.usageAuth.\n" +
                "  dataNonceEven - Even nonce newly generated by TPM.\n" +
                "  datanonceOdd - Nonce generated by system associated with dataAuthHandle\n" +
                "  continueDataSession - Continue use flag, TRUE if handle is still active\n" +
                "  dataAuth - The authorization session digest used for the dataAuth session. HMAC key: entity.usageAuth.\n" +
                "\nDescription:\n" +
                "  The TPM_Unseal operation will reveal TPM_Seal’ed data only if it was encrypted on this platform and the current configuration (as defined by the named PCR contents) is the one named as qualified to decrypt it.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 10.2" ),
            new TPMCommandDescription( 0x00000019, "TPM_ORD_DirWriteAuth", "Input:\n" +
                "  dirIndex - Index of the DIR\n" +
                "  newContents - New value to be stored in named DIR\n" +
                "  authHandle - The authorization session handle used for command.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - The authorization session digest for inputs. HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: ownerAuth\n" +
                "\nDescription:\n" +
                "  The TPM_DirWriteAuth operation provides write access to the Data Integrity Registers. DIRs are non-volatile memory registers held in a TPM-shielded location. Owner authentication is required to authorize this action.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 27.3.1" ),
            new TPMCommandDescription( 0x0000001A, "TPM_ORD_DirRead", "Input:\n" +
                "  dirIndex - Index of the DIR to be read\n" +
                "\nOutput:\n" +
                "  dirContents - The current contents of the named DIR\n" +
                "\nDescription:\n" +
                "  The TPM_DirRead operation provides read access to the DIRs. No authentication is required to perform this action because typically no cryptographically useful AuthData is available early in boot.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 27.3.2" ),
            new TPMCommandDescription( 0x0000001B, "TPM_ORD_CMK_CreateBlob", "Input:\n" +
                "  parentHandle - Handle of the parent key that can decrypt encData.\n" +
                "  migrationType - The migration type, either TPM_MS_RESTRICT_MIGRATE or TPM_MS_RESTRICT_APPROVE\n" +
                "  migrationKeyAuth - Migration public key and its authorization session digest.\n" +
                "  pubSourceKeyDigest - The digest of the TPM_PUBKEY of the entity to be migrated\n" +
                "  msaListSize - The size of the msaList parameter, which is a variable length TPM_MSA_COMPOSITE structure\n" +
                "  msaList - One or more digests of public keys belonging to migration authorities\n" +
                "  restrictTicketSize - The size of the restrictTicket parameter\n" +
                "  restrictTicket- If migrationType is TPM_MS_RESTRICT_APPROVE, a TPM_CMK_AUTH structure, containing the digests of the public keys belonging to the Migration Authority, the destination parent key and the key-to-be-migrated.\n" +
                "  sigTicketSize - The size of the sigTicket parameter\n" +
                "  sigTicket - If migrationType is TPM_MS_RESTRICT_APPROVE, a TPM_HMAC structure, generated by the TPM, signaling a valid signature over restrictTicket\n" +
                "  encDataSize - The size of the encData parameter\n" +
                "  encData - The encrypted entity that is to be modified.\n" +
                "  parentAuthHandle - The authorization session handle used for the parent key.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with parentAuthHandle\n" +
                "  continueAuthSession - Continue use flag for parent session\n" +
                "  parentAuth - HMAC key: parentKey.usageAuth.\n" +
                "\nOutput:\n" +
                "  randomSize - The used size of the output area for random\n" +
                "  random - String used for xor encryption\n" +
                "  outDataSize - The used size of the output area for outData\n" +
                "  outData - The modified, encrypted entity.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with parentAuthHandle\n" +
                "  continueAuthSession - Continue use flag for parent key session\n" +
                "  resAuth - HMAC key: parentKey.usageAuth\n" +
                "\nDescription:\n" +
                "  TPM_CMK_CreateBlob command is very similar to TPM_CreateMigrationBlob, except that it: (1) uses an extra ticket (restrictedKeyAuth) instead of a migrationAuth authorization session; (2) uses the migration options TPM_MS_RESTRICT_MIGRATE or TPM_MS_RESTRICT_APPROVE; (3) produces a wrapped key blob whose migrationAuth is independent of tpmProof.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 11.9" ),
            new TPMCommandDescription( 0x0000001C, "TPM_ORD_CMK_SetRestrictions", "Input:\n" +
                "  restriction - The bit mask of how to set the restrictions on CMK keys\n" +
                "  authHandle - The authorization session handle TPM Owner authentication\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - The authorization session digest. HMAC key:ownerAuth\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - Authorization HMAC key: ownerAuth.\n" +
                "\nDescription:\n" +
                "  This command is used by the Owner to dictate the usage of a certified-migration key with delegated authorization (authorization other than actual owner authorization).\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 11.5" ),
            new TPMCommandDescription( 0x0000001D, "TPM_ORD_CMK_ApproveMA", "Input:\n" +
                "  migrationAuthorityDigest - A digest of a TPM_MSA_COMPOSITE structure (itself one or more digests of public keys belonging to migration authorities)\n" +
                "  authHandle - The authorization session handle used for owner authentication.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - Authorization HMAC, key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  outData - HMAC of migrationAuthorityDigest\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - Authorization HMAC, key: ownerAuth\n" +
                "\nDescription:\n" +
                "  This command creates an authorization ticket, to allow the TPM owner to specify which Migration Authorities they approve and allow users to create certified-migration-keys without further involvement with the TPM owner.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 11.6" ),
            new TPMCommandDescription( 0x0000001E, "TPM_ORD_UnBind", "Input:\n" +
                "  keyHandle - The keyHandle identifier of a loaded key that can perform UnBind operations.\n" +
                "  inDataSize - The size of the input blob\n" +
                "  inData - Encrypted blob to be decrypted\n" +
                "  authHandle - The handle used for keyHandle authorization\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  privAuth - The authorization session digest that authorizes the inputs and use of keyHandle. HMAC key: key.usageAuth.\n" +
                "\nOutput:\n" +
                "  outDataSize - The length of the returned decrypted data\n" +
                "  outData - The resulting decrypted data.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: key.usageAuth.\n" +
                "\nDescription:\n" +
                "  TPM_UnBind takes the data blob that is the result of a Tspi_Data_Bind command and decrypts it for export to the User. The caller must authorize the use of the key that will decrypt the incoming blob.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 10.3" ),
            new TPMCommandDescription( 0x0000001F, "TPM_ORD_CreateWrapKey", "Input:\n" +
                "  parentHandle - Handle of a loaded key that can perform key wrapping.\n" +
                "  dataUsageAuth - Encrypted usage AuthData for the key.\n" +
                "  dataMigrationAuth - Encrypted migration AuthData for the key.\n" +
                "  keyInfo - Information about key to be created, pubkey.keyLength and keyInfo.encData elements are 0. MAY be TPM_KEY12\n" +
                "  authHandle - parent key authorization. Must be an OSAP session.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Ignored\n" +
                "  pubAuth - Authorization HMAC key: parentKey.usageAuth.\n" +
                "\nOutput:\n" +
                "  wrappedKey - The TPM_KEY structure which includes the public and encrypted private key. MAY be TPM_KEY12\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, fixed at FALSE7 20 TPM_AUTHDATA resAuth Authorization HMAC key: parentKey.usageAuth.\n" +
                "\nDescription:\n" +
                "  The TPM_CreateWrapKey command both generates and creates a secure storage bundle for asymmetric keys.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 10.4" ),
            new TPMCommandDescription( 0x00000020, "TPM_ORD_LoadKey", "Input:\n" +
                "  parentHandle - TPM handle of parent key.\n" +
                "  inKey - Incoming key structure, both encrypted private and clear public portions. MAY be TPM_KEY12\n" +
                "  authHandle - The authorization session handle used for parentHandle authorization.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  parentAuth - The authorization session digest for inputs and parentHandle. HMAC key: parentKey.usageAuth.\n" +
                "\nOutput:\n" +
                "  inkeyHandle - Internal TPM handle where decrypted key was loaded.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: parentKey.usageAuth.\n" +
                "\nDescription:\n" +
                "  Before the TPM can use a key to either wrap, unwrap, unbind, seal, unseal, sign or perform any other action, it needs to be present in the TPM. The TPM_LoadKey2 function loads the key into the TPM for further use.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 10.5" ),
            new TPMCommandDescription( 0x00000021, "TPM_ORD_GetPubKey", "Input:\n" +
                "  keyHandle - TPM handle of key.\n" +
                "  authHandle - The authorization session handle used for keyHandle authorization.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  keyAuth - Authorization HMAC key: key.usageAuth.\n" +
                "\nOutput:\n" +
                "  pubKey - Public portion of key in keyHandle.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - Authorization. HMAC key: key.usageAuth.\n" +
                "\nDescription:\n" +
                "  The owner of a key may wish to obtain the public key value from a loaded key. This information may have privacy concerns so the command must have authorization from the key owner.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 10.6" ),
            new TPMCommandDescription( 0x00000022, "TPM_ORD_EvictKey", "Input:\n" +
                "  evictHandle - The handle of the key to be evicted.\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  The TPM will invalidate the key stored in the specified handle and return the space to the available internal pool for subsequent query by TPM_GetCapability and usage by TPM_LoadKey.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 27.1.1" ),
            new TPMCommandDescription( 0x00000023, "TPM_ORD_KeyControlOwner", "Input:\n" +
                "  keyHandle - The handle of a loaded key.\n" +
                "  pubKey - The public key associated with the loaded key\n" +
                "  bitName - The name of the bit to be modified\n" +
                "  bitValue - The value to set the bit to\n" +
                "  authHandle - The authorization session handle used for owner authentication.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - HMAC authorization: key ownerAuth\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM.\n" +
                "  nonceOdd - Nonce generated by system\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - HMAC authorization: key ownerAuth\n" +
                "\nDescription:\n" +
                "  This command controls some attributes of keys that are stored within the TPM key cache.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 21.1" ),
            new TPMCommandDescription( 0x00000024, "TPM_ORD_CMK_ConvertMigration", "Input:\n" +
                "  parentHandle - Handle of a loaded key that can decrypt keys.\n" +
                "  restrictTicket - The digests of public keys belonging to the Migration Authority, the destination parent key and the key-to-be-migrated.\n" +
                "  sigTicket - A signature ticket, generated by the TPM, signaling a valid signature over restrictTicket\n" +
                "  migratedKey - The public key of the key-to-be-migrated. The private portion MUST be TPM_MIGRATE_ASYMKEY properly XOR’d\n" +
                "  msaListSize - The size of the msaList parameter, which is a variable length TPM_MSA_COMPOSITE structure\n" +
                "  msaList - One or more digests of public keys belonging to migration authorities\n" +
                "  randomSize - Size of random\n" +
                "  random - Random value used to hide key data.\n" +
                "  authHandle - The authorization session handle used for keyHandle.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  parentAuth - Authorization HMAC: parentKey.usageAuth\n" +
                "\nOutput:\n" +
                "  outDataSize - The used size of the output area for outData\n" +
                "  outData - The encrypted private key that can be loaded with TPM_LoadKey\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - Authorization HMAC key .usageAuth\n" +
                "\nDescription:\n" +
                "  TPM_CMK_ConvertMigration completes the migration of certified migration blobs.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 11.10" ),
            new TPMCommandDescription( 0x00000025, "TPM_ORD_MigrateKey", "Input:\n" +
                "  maKeyHandle - Handle of the key to be used to migrate the key.\n" +
                "  pubKey - Public key to which the blob is to be migrated\n" +
                "  inDataSize - The size of inData\n" +
                "  inData - The input blob\n" +
                "  maAuthHandle - The authorization session handle used for maKeyHandle.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with certAuthHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  keyAuth - The authorization session digest for the inputs and key to be signed. HMAC key: maKeyHandle.usageAuth.\n" +
                "\nOutput:\n" +
                "  outDataSize - The used size of the output area for outData\n" +
                "  outData - The re-encrypted blob\n" +
                "  nonceEven - Even nonce newly generated by TPM\n" +
                "  nonceOdd - Nonce generated by system associated with certAuthHandle\n" +
                "  continueAuthSession - Continue use flag for cert key session\n" +
                "  keyAuth - The authorization session digest for the target key. HMAC key: maKeyHandle.usageAuth\n" +
                "\nDescription:\n" +
                "  The TPM_MigrateKey command performs the function of a migration authority.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 11.4" ),
            new TPMCommandDescription( 0x00000026, "TPM_ORD_GPIO_AuthChannel", "Input:\n" +
                "  None specified.\n" +
                "\nOutput:\n" +
                "  None specified.\n" +
                "\nDescription:\n" +
                "  Nothing.\n" +
                "\nReference:\n" +
                "  Not defined in TPM Main Specification Version 1.2, Part 3" ),
            new TPMCommandDescription( 0x00000027, "TPM_ORD_GPIO_ReadWrite", "Input:\n" +
                "  None specified.\n" +
                "\nOutput:\n" +
                "  None specified.\n" +
                "\nDescription:\n" +
                "  Nothing.\n" +
                "\nReference:\n" +
                "  Not defined in TPM Main Specification Version 1.2, Part 3" ),
            new TPMCommandDescription( 0x00000028, "TPM_ORD_CreateMigrationBlob", "Input:\n" +
                "  parentHandle - Handle of the parent key that can decrypt encData.\n" +
                "  migrationType - The migration type, either MIGRATE or REWRAP\n" +
                "  migrationKeyAuth - Migration public key and its authorization session digest.\n" +
                "  encDataSize - The size of the encData parameter\n" +
                "  encData - The encrypted entity that is to be modified.\n" +
                "  parentAuthHandle - The authorization session handle used for the parent key.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with parentAuthHandle\n" +
                "  continueAuthSession - Continue use flag for parent session\n" +
                "  parentAuth - Authorization HMAC key: parentKey.usageAuth.\n" +
                "  entityAuthHandle - The authorization session handle used for the encrypted entity.\n" +
                "  entitylastNonceEven - Even nonce previously generated by TPM\n" +
                "  entitynonceOdd - Nonce generated by system associated with entityAuthHandle\n" +
                "  continueEntitySession - Continue use flag for entity session\n" +
                "  entityAuth - Authorization HMAC key: entity.migrationAuth.\n" +
                "\nOutput:\n" +
                "  randomSize - The used size of the output area for random\n" +
                "  random - String used for xor encryption\n" +
                "  outDataSize - The used size of the output area for outData\n" +
                "  outData - The modified, encrypted entity.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with parentAuthHandle\n" +
                "  continueAuthSession - Continue use flag for parent key session\n" +
                "  resAuth - Authorization. HMAC key: parentKey.usageAuth.\n" +
                "  entityNonceEven - Even nonce newly generated by TPM to cover entity\n" +
                "  entitynonceOdd - Nonce generated by system associated with entityAuthHandle\n" +
                "  continueEntitySession - Continue use flag for entity session\n" +
                "  entityAuth - Authorization HMAC key: entity.migrationAuth.\n" +
                "\nDescription:\n" +
                "  The TPM_CreateMigrationBlob command implements the first step in the process of moving a migratable key to a new parent or platform. Execution of this command requires knowledge of the migrationAuth field of the key to be migrated.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 11.1" ),
            new TPMCommandDescription( 0x00000029, "TPM_ORD_DAA_JOIN", "Input:\n" +
                "  handle - Session handle\n" +
                "  stage - Processing stage of join\n" +
                "  inputSize0 - Size of inputData0 for this stage of JOIN\n" +
                "  inputData0 - Data to be used by this capability\n" +
                "  inputSize1 - Size of inputData1 for this stage of JOIN\n" +
                "  inputData1 - Data to be used by this capability\n" +
                "  authHandle - The authorization session handle used for owner authentication\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  ownerAuth - The authorization session digest for inputs and owner. HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  outputSize - Size of outputData\n" +
                "  outputData - Data produced by this capability\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - Authorization HMAC key: ownerAuth.\n" +
                "\nDescription:\n" +
                "  TPM_DAA_Join is the process that establishes the DAA parameters in the TPM for a specific DAA issuing authority.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 26.1" ),
            new TPMCommandDescription( 0x0000002A, "TPM_ORD_ConvertMigrationBlob", "Input:\n" +
                "  parentHandle - Handle of a loaded key that can decrypt keys.\n" +
                "  inDataSize - Size of inData\n" +
                "  inData - The XOR’d and encrypted key\n" +
                "  randomSize - Size of random\n" +
                "  random - Random value used to hide key data.\n" +
                "  authHandle - The authorization session handle used for keyHandle.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  parentAuth - The authorization session digest that authorizes the inputs and the migration of the key in parentHandle. HMAC key: parentKey.usageAuth\n" +
                "\nOutput:\n" +
                "  outDataSize - The used size of the output area for outData\n" +
                "  outData - The encrypted private key that can be loaded with TPM_LoadKey\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: parentKey.usageAuth\n" +
                "\nDescription:\n" +
                "  This command takes a migration blob and creates a normal wrapped blob. The migrated blob must be loaded into the TPM using the normal TPM_LoadKey function.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 11.2" ),
            new TPMCommandDescription( 0x0000002B, "TPM_ORD_AuthorizeMigrationKey", "Input:\n" +
                "  migrationScheme - Type of migration operation that is to be permitted for this key.\n" +
                "  migrationKey - The public key to be authorized.\n" +
                "  authHandle - The authorization session handle used for owner authentication.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - The authorization session digest for inputs and owner authorization. HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  outData - Returned public key and authorization session digest.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: ownerAuth.\n" +
                "\nDescription:\n" +
                "  This command creates an authorization blob, to allow the TPM owner to specify which migration facility they will use and allow users to migrate information without further involvement with the TPM owner.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 11.3" ),
            new TPMCommandDescription( 0x0000002C, "TPM_ORD_CreateMaintenanceArchive", "Input:\n" +
                "  generateRandom - Use RNG or Owner auth to generate ‘random’.\n" +
                "  authHandle - The authorization session handle used for owner authentication.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  randomSize - Size of the returned random data. Will be 0 if generateRandom is FALSE.\n" +
                "  random - Random data to XOR with result.\n" +
                "  archiveSize - Size of the encrypted archive\n" +
                "  archive - Encrypted key archive.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: ownerAuth.\n" +
                "\nDescription:\n" +
                "  This command creates the maintenance archive. It can only be executed by the owner, and may be shut off with the TPM_KillMaintenanceFeature command.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 12.1" ),
            new TPMCommandDescription( 0x0000002D, "TPM_ORD_LoadMaintenanceArchive", "Input:\n" +
                "  archiveSize - Sice of the encrypted archive\n" +
                "  archive - Encrypted key archive\n" +
                "  authHandle - The authorization session handle used for owner authentication.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle -- 20 TPM_AUTHDATA ownerAuth The authorization session digest for inputs and owner authentication. HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  vendor - specific arguments\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: ownerAuth, the original value and not the new auth value\n" +
                "\nDescription:\n" +
                "  This command loads in a Maintenance archive that has been massaged by the manufacturer to load into another TPM.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 12.2" ),
            new TPMCommandDescription( 0x0000002E, "TPM_ORD_KillMaintenanceFeature", "Input:\n" +
                "  authHandle - The authorization session handle used for owner authentication.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - HMAC key: ownerAuth\n" +
                "\nDescription:\n" +
                "  The TPM_KillMaintencanceFeature is a permanent action that prevents ANYONE from creating a maintenance archive. This action, once taken, is permanent until a new TPM Owner is set.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 12.3" ),
            new TPMCommandDescription( 0x0000002F, "TPM_ORD_LoadManuMaintPub", "Input:\n" +
                "  antiReplay - AntiReplay and validation nonce\n" +
                "  pubKey - The public key of the manufacturer to be in use for maintenance\n" +
                "\nOutput:\n" +
                "  checksum - Digest of pubKey and antiReplay\n" +
                "\nDescription:\n" +
                "  The TPM_LoadManuMaintPub command loads the manufacturer’s public key for use in the maintenance proces.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 12.4" ),
            new TPMCommandDescription( 0x00000030, "TPM_ORD_ReadManuMaintPub", "Input:\n" +
                "  antiReplay - AntiReplay and validation nonce\n" +
                "\nOutput:\n" +
                "  checksum - Digest of pubKey and antiReplay\n" +
                "\nDescription:\n" +
                "  The TPM_ReadManuMaintPub command is used to check whether the manufacturer’s public maintenance key in a TPM has the expected value. This may be useful during the manufacture process. The command returns a digest of the installed key, rather than the key itself.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 12.5" ),
            new TPMCommandDescription( 0x00000031, "TPM_ORD_DAA_SIGN", "Input:\n" +
                "  handle - Handle to the sign session\n" +
                "  stage - Stage of the sign process\n" +
                "  inputSize0 - Size of inputData0 for this stage of DAA_Sign\n" +
                "  inputData0 - Data to be used by this capability\n" +
                "  inputSize1 - Size of inputData1 for this stage of DAA_Sign\n" +
                "  inputData1 - Data to be used by this capability\n" +
                "  authHandle - The authorization session handle used for owner authentication\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  ownerAuth - The authorization session digest for inputs and owner. HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  outputSize - Size of outputData\n" +
                "  outputData - Data produced by this capability\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: ownerAuth.\n" +
                "\nDescription:\n" +
                "  outputSize - and outputData are always included in the outParamDigest.  This includes stage 0, where the outputData contains the DAA session handle.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 26.2" ),
            new TPMCommandDescription( 0x00000032, "TPM_ORD_CertifyKey", "Input:\n" +
                "  certHandle - Handle of the key to be used to certify the key.\n" +
                "  keyHandle - Handle of the key to be certified.\n" +
                "  antiReplay - 160 bits of externally supplied data (typically a nonce provided to prevent replay-attacks)\n" +
                "  certAuthHandle - The authorization session handle used for certHandle.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with certAuthHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  certAuth - The authorization session digest for inputs and certHandle. HMAC key: certKey.auth.\n" +
                "  keyAuthHandle - The authorization session handle used for the key to be signed.\n" +
                "  keylastNonceEven - Even nonce previously generated by TPM\n" +
                "  keynonceOdd - Nonce generated by system associated with keyAuthHandle\n" +
                "  continueKeySession - The continue use flag for the authorization session handle\n" +
                "  keyAuth - The authorization session digest for the inputs and key to be signed. HMAC key: key.usageAuth.\n" +
                "\nOutput:\n" +
                "  certifyInfo - TPM_CERTIFY_INFO or TPM_CERTIFY_INFO2 structure that provides information relative to keyhandle\n" +
                "  outDataSize - The used size of the output area for outData\n" +
                "  outData - The signature of certifyInfo\n" +
                "  nonceEven - Even nonce newly generated by TPM\n" +
                "  nonceOdd - Nonce generated by system associated with certAuthHandle\n" +
                "  continueAuthSession - Continue use flag for cert key session\n" +
                "  resAuth - The authorization session digest for the returned parameters and parentHandle. HMAC key: certKey -> auth.\n" +
                "  keyNonceEven - Even nonce newly generated by TPM\n" +
                "  keynonceOdd - Nonce generated by system associated with keyAuthHandle\n" +
                "  continueKeySession - Continue use flag for target key session\n" +
                "  keyAuth - The authorization session digest for the target key. HMAC key: key.auth.\n" +
                "\nDescription:\n" +
                "  The TPM_CertifyKey operation allows one key to certify the public portion of another key.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 13.8" ),
            new TPMCommandDescription( 0x00000033, "TPM_ORD_CertifyKey2", "Input:\n" +
                "  keyHandle - Handle of the key to be certified.\n" +
                "  certHandle - Handle of the key to be used to certify the key.\n" +
                "  migrationPubDigest - The digest of a TPM_MSA_COMPOSITE structure, containing at least one public key of a Migration Authority\n" +
                "  antiReplay - 160 bits of externally supplied data (typically a nonce provided to prevent replay-attacks)\n" +
                "  keyAuthHandle - The authorization session handle used for the key to be signed.\n" +
                "  keylastNonceEven - Even nonce previously generated by TPM\n" +
                "  keynonceOdd - Nonce generated by system associated with keyAuthHandle\n" +
                "  continueKeySession - The continue use flag for the authorization session handle\n" +
                "  keyAuth - The authorization session digest for the inputs and key to be signed. HMAC key: key.usageAuth.\n" +
                "  certAuthHandle - The authorization session handle used for certHandle.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with certAuthHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  certAuth - Authorization HMAC key: certKey.auth.\n" +
                "\nOutput:\n" +
                "  certifyInfo - TPM_CERTIFY_INFO2 relative to keyHandle\n" +
                "  outDataSize - The used size of the output area for outData\n" +
                "  outData - The signed public key.\n" +
                "  keyNonceEven - Even nonce newly generated by TPM\n" +
                "  keyNonceOdd - Nonce generated by system associated with certAuthHandle\n" +
                "  keyContinueAuthSession - Continue use flag for cert key session\n" +
                "  keyResAuth - Authorization HMAC key: keyHandle -> auth.\n" +
                "  certNonceEven - Even nonce newly generated by TPM\n" +
                "  AuthLastNonceOdd - Nonce generated by system associated with certAuthHandle\n" +
                "  CertContinueAuthSession - Continue use flag for cert key session\n" +
                "  certResAuth - Authorization HMAC key: certHandle -> auth.\n" +
                "\nDescription:\n" +
                "  This command is based on TPM_CertifyKey, but includes the ability to certify a Certifiable Migration Key (CMK), which requires extra input parameters.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 13.9" ),
            new TPMCommandDescription( 0x0000003C, "TPM_ORD_Sign", "Input:\n" +
                "  keyHandle - The keyHandle identifier of a loaded key that can perform digital signatures.\n" +
                "  areaToSignSize - The size of the areaToSign parameter\n" +
                "  areaToSign - The value to sign\n" +
                "  authHandle - The authorization session handle used for keyHandle authorization\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  privAuth - The authorization session digest that authorizes the use of keyHandle. HMAC key: key.usageAuth\n" +
                "\nOutput:\n" +
                "  sigSize - The length of the returned digital signature\n" +
                "  sig - The resulting digital signature.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: key.usageAuth\n" +
                "\nDescription:\n" +
                "  The Sign command signs data and returns the resulting digital signature.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 13.5" ),
            new TPMCommandDescription( 0x0000003D, "TPM_ORD_Sealx", "Input:\n" +
                "  keyHandle - Handle of a loaded key that can perform seal operations.\n" +
                "  encAuth - The encrypted AuthData for the sealed data.\n" +
                "  pcrInfoSize - The size of the pcrInfo parameter. If 0 there are no PCR registers in use\n" +
                "  pcrInfo - MUST use TPM_PCR_INFO_LONG.\n" +
                "  inDataSize - The size of the inData parameter\n" +
                "  inData - The data to be sealed to the platform and any specified PCRs\n" +
                "  authHandle - The authorization session handle used for keyHandle authorization. Must be an OSAP session for this command.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Ignored\n" +
                "  pubAuth - The authorization session digest for inputs and keyHandle. HMAC key: key.usageAuth.\n" +
                "\nOutput:\n" +
                "  sealedData - Encrypted, integrity-protected data object that is the result of the TPM_Sealx operation.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, fixed value of FALSE\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: key.usageAuth.\n" +
                "\nDescription:\n" +
                "  The TPM_Sealx command works exactly like the TPM_Seal command with the additional requirement of encryption for the inData parameter. This command also places in the sealed blob the information that the TPM_Unseal also requires encryption.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 10.7" ),
            new TPMCommandDescription( 0x0000003E, "TPM_ORD_Quote2", "Input:\n" +
                "  keyHandle - The keyHandle identifier of a loaded key that can sign the PCR values.\n" +
                "  externalData - 160 bits of externally supplied data (typically a nonce provided by a server to prevent replay-attacks)\n" +
                "  targetPCR - The indices of the PCRs that are to be reported.\n" +
                "  addVersion - When TRUE add TPM_CAP_VERSION_INFO to the output\n" +
                "  authHandle - The authorization session handle used for keyHandle authorization.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  privAuth - The authorization session digest for inputs and keyHandle. HMAC key: key -> usageAuth.\n" +
                "\nOutput:\n" +
                "  pcrData - The value created and signed for the quote\n" +
                "  versionInfoSize - Size of the version info\n" +
                "  versionInfo - The version info\n" +
                "  sigSize - The used size of the output area for the signature\n" +
                "  sig - The signed data blob.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: Key -> usageAuth.\n" +
                "\nDescription:\n" +
                "  The TPM_Quote2 operation provides cryptographic reporting of PCR values. A loaded key is required for operation. TPM_Quote2 uses a key to sign a statement that names the current value of a chosen PCR and externally supplied data (which may be a nonce supplied by a Challenger).\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 16.5" ),
            new TPMCommandDescription( 0x0000003F, "TPM_ORD_SetCapability", "Input:\n" +
                "  capArea - Partition of capabilities to be set\n" +
                "  subCapSize - Size of subCap parameter\n" +
                "  subCap - Further definition of information\n" +
                "  setValueSize - The size of the value to set\n" +
                "  setValue - The value to set\n" +
                "  authHandle - The authorization session handle used for owner authentication.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - Authorization. HMAC key: owner.usageAuth.\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - Authorization HMAC key:owner.usageAuth.\n" +
                "\nDescription:\n" +
                "  This command sets values in the TPM.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 7.2" ),
            new TPMCommandDescription( 0x00000040, "TPM_ORD_ResetLockValue", "Input:\n" +
                "  authHandle - The authorization session handle used for TPM Owner authorization\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - HMAC key TPM Owner auth\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - HMAC key: TPM Owner auth\n" +
                "\nDescription:\n" +
                "  Command that resets the TPM dictionary attack mitigation values. This allows the TPM owner to cancel the effect of a number of successive authorization failures. Dictionary attack mitigation is vendor specific, and the actions here are one possible implementation. The TPM may treat an authorization failure outside the mitigation time as a normal failure and not disable the command\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 9.3" ),
            new TPMCommandDescription( 0x00000041, "TPM_ORD_LoadKey2", "Input:\n" +
                "  parentHandle - TPM handle of parent key.\n" +
                "  inKey - Incoming key structure, both encrypted private and clear public portions. MAY be TPM_KEY12\n" +
                "  authHandle - The authorization session handle used for parentHandle authorization.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  parentAuth - The authorization session digest for inputs and parentHandle. HMAC key: parentKey.usageAuth.-\n" +
                "\nOutput:\n" +
                "  inkeyHandle - Internal TPM handle where decrypted key was loaded.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: parentKey.usageAuth.\n" +
                "\nDescription:\n" +
                "  Before the TPM can use a key to either wrap, unwrap, unbind, seal, unseal, sign or perform any other action, it needs to be present in the TPM. The TPM_LoadKey2 function loads the key into the TPM for further use.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 10.5" ),
            new TPMCommandDescription( 0x00000046, "TPM_ORD_GetRandom", "Input:\n" +
                "  bytesRequested - Number of bytes to return\n" +
                "\nOutput:\n" +
                "  randomBytesSize - The number of bytes returned\n" +
                "  randomBytes - The returned bytes\n" +
                "\nDescription:\n" +
                "  TPM_GetRandom returns the next bytesRequested bytes from the random number generator to the caller.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 13.6" ),
            new TPMCommandDescription( 0x00000047, "TPM_ORD_StirRandom", "Input:\n" +
                "  dataSize - Number of bytes of input\n" +
                "  inData - Data to add entropy to RNG state\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  TPM_StirRandom adds entropy to the RNG state.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 13.7" ),
            new TPMCommandDescription( 0x00000050, "TPM_ORD_SelfTestFull", "Input:\n" +
                "  None.\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  TPM_SelfTestFull tests all of the TPM capabilities.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 4.1" ),
            new TPMCommandDescription( 0x00000052, "TPM_ORD_CertifySelfTest", "Input:\n" +
                "  keyHandle - The keyHandle identifier of a loaded key that can perform digital signatures.\n" +
                "  antiReplay - Anti Replay nonce to prevent replay of messages\n" +
                "  authHandle - The authorization session handle used for keyHandle authorization\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  privAuth - The authorization session digest that authorizes the inputs and use of keyHandle. HMAC key: key.usageAuth\n" +
                "\nOutput:\n" +
                "  sigSize - The length of the returned digital signature\n" +
                "  sig - The resulting digital signature.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: key.usageAuth\n" +
                "\nDescription:\n" +
                "  TPM_CertifySelfTest causes the TPM to perform a full self-test and return an authenticated value if the test passes.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 28.3" ),
            new TPMCommandDescription( 0x00000053, "TPM_ORD_ContinueSelfTest", "Input:\n" +
                "  None.\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  TPM_ContinueSelfTest informs the TPM that it should complete the self-test of all TPM functions.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 4.2" ),
            new TPMCommandDescription( 0x00000054, "TPM_ORD_GetTestResult", "Input:\n" +
                "  None.\n" +
                "\nOutput:\n" +
                "  outDataSize - The size of the outData area\n" +
                "  outData - The outData this is manufacturer specific\n" +
                "\nDescription:\n" +
                "  TPM_GetTestResult provides manufacturer specific information regarding the results of the self-test. This command will work when the TPM is in self-test failure mode.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 4.3" ),
            new TPMCommandDescription( 0x0000005A, "TPM_ORD_Reset", "Input:\n" +
                "  None.\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  TPM_Reset releases all resources associated with existing authorization sessions. This is useful if a TSS driver has lost track of the state in the TPM.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 27.5" ),
            new TPMCommandDescription( 0x0000005B, "TPM_ORD_OwnerClear", "Input:\n" +
                "  authHandle - The authorization session handle used for owner authentication.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Ignored\n" +
                "  ownerAuth - The authorization session digest for inputs and owner authentication. HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Fixed value FALSE\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: old ownerAuth.\n" +
                "\nDescription:\n" +
                "  The TPM_OwnerClear command performs the clear operation under Owner authentication. This command is available until the Owner executes the TPM_DisableOwnerClear, at which time any further invocation of this command returns TPM_CLEAR_DISABLED.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 6.2" ),
            new TPMCommandDescription( 0x0000005C, "TPM_ORD_DisableOwnerClear", "Input:\n" +
                "  authHandle - The authorization session handle used for owner authentication.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - The authorization session digest for inputs and owner authentication. HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: ownerAuth.\n" +
                "\nDescription:\n" +
                "  The TPM_DisableOwnerClear command disables the ability to execute the TPM_OwnerClear command permanently. Once invoked the only method of clearing the TPM will require physical access to the TPM.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 6.4" ),
            new TPMCommandDescription( 0x0000005D, "TPM_ORD_ForceClear", "Input:\n" +
                "  -\n" +
                "\nOutput:\n" +
                "  -\n" +
                "\nDescription:\n" +
                "  Nothing.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section x.y" ),
            new TPMCommandDescription( 0x0000005E, "TPM_ORD_DisableForceClear", "Input:\n" +
                "  None.\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  The TPM_ForceClear command performs the Clear operation under physical access. This command is available until the execution of the TPM_DisableForceClear, at which time any further invocation of this command returns TPM_CLEAR_DISABLED.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 6.3" ),
            new TPMCommandDescription( 0x00000064, "TPM_ORD_GetCapabilitySigned", "Input:\n" +
                "  -\n" +
                "\nOutput:\n" +
                "  -\n" +
                "\nDescription:\n" +
                "  Nothing.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section x.y" ),
            new TPMCommandDescription( 0x00000065, "TPM_ORD_GetCapability", "Input:\n" +
                "  capArea - Partition of capabilities to be interrogated\n" +
                "  subCapSize - Size of subCap parameter\n" +
                "  subCap - Further definition of information\n" +
                "\nOutput:\n" +
                "  respSize - The length of the returned capability response\n" +
                "  resp - The capability response\n" +
                "\nDescription:\n" +
                "  This command returns current information regarding the TPM.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 7.1" ),
            new TPMCommandDescription( 0x00000066, "TPM_ORD_GetCapabilityOwner", "Input:\n" +
                "  authHandle - The authorization handle used for Owner authorization.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization handle\n" +
                "  ownerAuth - The authorization digest for inputs and owner authorization. HMAC key: OwnerAuth.\n" +
                "\nOutput:\n" +
                "  version - A properly filled out version structure.\n" +
                "  non_volatile_flags - The current state of the non-volatile flags.\n" +
                "  volatile_flags - The current state of the volatile flags.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization digest for the returned parameters. HMAC key: OwnerAuth.\n" +
                "\nDescription:\n" +
                "  TPM_GetCapabilityOwner enables the TPM Owner to retrieve all the non-volatile flags and the volatile flags in a single operation.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 7.3" ),
            new TPMCommandDescription( 0x0000006E, "TPM_ORD_OwnerSetDisable", "Input:\n" +
                "  disableState - Value for disable state\n" +
                "  authHandle - The authorization session handle used for owner authentication.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - The authorization session digest for inputs and owner authentication. HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: ownerAuth.\n" +
                "\nDescription:\n" +
                "  The TPM owner sets the PERMANENT disable flag to TRUE or FALSE.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 5.2" ),
            new TPMCommandDescription( 0x0000006F, "TPM_ORD_PhysicalEnable", "Input:\n" +
                "  None.\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  Sets the PERMANENT disable flag to FALSE using physical presence as authorization.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 5.3" ),
            new TPMCommandDescription( 0x00000070, "TPM_ORD_PhysicalDisable", "Input:\n" +
                "  None.\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  Sets the PERMANENT disable flag to TRUE using physical presence as authorization.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 5.4" ),
            new TPMCommandDescription( 0x00000071, "TPM_ORD_SetOwnerInstall", "Input:\n" +
                "  state - State to which ownership flag is to be set.\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  When enabled but without an owner this command sets the PERMANENT flag that allows or disallows the ability to insert an owner.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 5.1" ),
            new TPMCommandDescription( 0x00000072, "TPM_ORD_PhysicalSetDeactivated", "Input:\n" +
                "  state - State to which deactivated flag is to be set.\n" +
                "\nOutput:\n" +
                "  ordinal - Command ordinal: TPM_ORD_PhysicalSetDeactivated\n" +
                "\nDescription:\n" +
                "  Changes the TPM persistant deactivated flag using physical presence as authorization.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 5.5" ),
            new TPMCommandDescription( 0x00000073, "TPM_ORD_SetTempDeactivated", "Input:\n" +
                "  authHandle - Auth handle for operation validation. Session type MUST be OIAP\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  operatorAuth - HMAC key: operatorAuth\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: operatorAuth.\n" +
                "\nDescription:\n" +
                "  This command allows the operator of the platform to deactivate the TPM until the next boot of the platform.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 5.6" ),
            new TPMCommandDescription( 0x00000074, "TPM_ORD_SetOperatorAuth", "Input:\n" +
                "  operatorAuth - The operator AuthData\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command allows the setting of the operator AuthData value.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 5.7" ),
            new TPMCommandDescription( 0x00000075, "TPM_ORD_SetOwnerPointer", "Input:\n" +
                "  entityType - The type of entity in use\n" +
                "  entityValue - The selection value based on entityType\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command will set a reference to which secret the TPM will use when executing an owner secret related OIAP or OSAP session.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 18.4" ),
            new TPMCommandDescription( 0x00000078, "TPM_ORD_CreateEndorsementKeyPair", "Input:\n" +
                "  antiReplay - Arbitrary data\n" +
                "  keyInfo - Information about key to be created, this includes all algorithm parameters\n" +
                "\nOutput:\n" +
                "  pubEndorsementKey - The public endorsement key\n" +
                "  checksum - Hash of pubEndorsementKey and antiRepla\n" +
                "\nDescription:\n" +
                "  This command creates the TPM endorsement key. It returns a failure code if an endorsement key already exists.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 14.1" ),
            new TPMCommandDescription( 0x00000079, "TPM_ORD_MakeIdentity", "Input:\n" +
                "  identityAuth - Encrypted usage AuthData for the new identity\n" +
                "  labelPrivCADigest - The digest of the identity label and privacy CA chosen for the AIK\n" +
                "  idKeyParams - Structure containing all parameters of new identity key. pubKey.keyLength & idKeyParams.encData are both 0 MAY be TPM_KEY12\n" +
                "  srkAuthHandle - The authorization session handle used for SRK authorization.\n" +
                "  srkLastNonceEven - Even nonce previously generated by TPM\n" +
                "  srknonceOdd - Nonce generated by system associated with srkAuthHandle\n" +
                "  continueSrkSession - Ignored\n" +
                "  srkAuth - The authorization session digest for the inputs and the SRK. HMAC key: srk.usageAuth.\n" +
                "  authHandle - The authorization session handle used for owner authentication. Session type MUST be OSAP.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Ignored\n" +
                "  ownerAuth - The authorization session digest for inputs and owner. HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  idKey - The newly created identity key. MAY be TPM_KEY12\n" +
                "  identityBindingSize - The used size of the output area for identityBinding\n" +
                "  identityBinding - Signature of TPM_IDENTITY_CONTENTS using idKey.private.\n" +
                "  srkNonceEven - Even nonce newly generated by TPM.\n" +
                "  srknonceOdd - Nonce generated by system associated with srkAuthHandle\n" +
                "  continueSrkSession - Continue use flag. Fixed value of FALSE\n" +
                "  srkAuth - The authorization session digest used for the outputs and srkAuth session. HMAC key: srk.usageAuth.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag. Fixed value of FALSE\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: ownerAuth.\n" +
                "\nDescription:\n" +
                "  Generate a new Attestation Identity Key (AIK).\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 15.1" ),
            new TPMCommandDescription( 0x0000007A, "TPM_ORD_ActivateIdentity", "Input:\n" +
                "  idKeyHandle - Identity key to be activated\n" +
                "  blobSize - Size of encrypted blob from CA\n" +
                "  blob - The encrypted ASYM_CA_CONTENTS or TPM_EK_BLOB\n" +
                "  idKeyAuthHandle - The authorization session handle used for ID key authorization.\n" +
                "  idKeyLastNonceEven - Even nonce previously generated by TPM\n" +
                "  idKeynonceOdd - Nonce generated by system associated with idKeyAuthHandle\n" +
                "  continueIdKeySession - Continue usage flag for idKeyAuthHandle.\n" +
                "  idKeyAuth - The authorization session digest for the inputs and ID key. HMAC key: idKey.usageAuth.\n" +
                "  authHandle - The authorization session handle used for owner authentication.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - The authorization session digest for inputs and owner. HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  symmetricKey - The decrypted symmetric key.\n" +
                "  idKeyNonceEven - Even nonce newly generated by TPM.\n" +
                "  idKeynonceOdd - Nonce generated by system associated with idKeyAuthHandle\n" +
                "  continueIdKeySession - Continue use flag, TRUE if handle is still active\n" +
                "  idKeyAuth - The authorization session digest used for the returned parameters and idKeyAuth session. HMAC key: idKey.usageAuth.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: ownerAuth.\n" +
                "\nDescription:\n" +
                "  The purpose of TPM_ActivateIdentity is to twofold. The first purpose is to obtain assurance that the credential in the TPM_SYM_CA_ATTESTATION is for this TPM. The second purpose is to obtain the session key used to encrypt the TPM_IDENTITY_CREDENTIAL.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 15.2" ),
            new TPMCommandDescription( 0x0000007C, "TPM_ORD_ReadPubek", "Input:\n" +
                "  antiReplay - Arbitrary data\n" +
                "\nOutput:\n" +
                "  pubEndorsementKey - The public endorsement key\n" +
                "  checksum - Hash of pubEndorsementKey and antiReplay\n" +
                "\nDescription:\n" +
                "  Return the endorsement key public portion. This value should have controls placed upon access, as it is a privacy sensitive value.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 14.4" ),
            new TPMCommandDescription( 0x0000007D, "TPM_ORD_OwnerReadPubek", "Input:\n" +
                "  authHandle - The authorization session handle used for owner authentication.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - The authorization session digest for inputs and owner authentication. HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  pubEndorsementKey - The public endorsement key\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: ownerAuth.\n" +
                "\nDescription:\n" +
                "  Return the endorsement key public portion. This is authorized by the TPM Owner.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 27.6" ),
            new TPMCommandDescription( 0x0000007E, "TPM_ORD_DisablePubekRead", "Input:\n" +
                "  authHandle - The authorization session handle used for owner authentication.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - The authorization session digest for inputs and owner authorization. HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: ownerAuth.\n" +
                "\nDescription:\n" +
                "  The TPM Owner may wish to prevent any entity from reading the PUBEK. This command sets the non-volatile flag so that the TPM_ReadPubek command always returns TPM_DISABLED_CMD.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 27.7" ),
            new TPMCommandDescription( 0x0000007F, "TPM_ORD_CreateRevocableEK", "Input:\n" +
                "  antiReplay - Arbitrary data\n" +
                "  keyInfo - Information about key to be created, this includes all algorithm parameters\n" +
                "  generateReset - If TRUE use TPM RNG to generate EKreset. If FALSE use the passed value inputEKreset\n" +
                "  inputEKreset - The authorization value to be used with TPM_RevokeTrust if generateReset==FALSE, else the parameter is present but ignored\n" +
                "\nOutput:\n" +
                "  pubEndorsementKey - The public endorsement key\n" +
                "  checksum - Hash of pubEndorsementKey and antiReplay\n" +
                "  outputEKreset - The AuthData value to use TPM_RevokeTrust\n" +
                "\nDescription:\n" +
                "  This command creates the TPM endorsement key. It returns a failure code if an endorsement key already exists. The TPM vendor may have a separate mechanism to create the EK and “squirt” the value into the TPM.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 14.2" ),
            new TPMCommandDescription( 0x00000080, "TPM_ORD_RevokeTrust", "Input:\n" +
                "  EKReset - The value that will be matched to EK Reset\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command clears the EK and sets the TPM back to a pure default state. The generation of the AuthData value occurs during the generation of the EK. It is the responsibility of the EK generator to properly protect and disseminate the RevokeTrust AuthData.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 14.3" ),
            new TPMCommandDescription( 0x00000081, "TPM_ORD_OwnerReadInternalPub", "Input:\n" +
                "  keyHandle - Handle for either PUBEK or SRK\n" +
                "  authHandle - The authorization session handle used for owner authentication.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - The authorization session digest for inputs and owner authentication. HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  publicPortion - The public portion of the requested key\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: ownerAuth.\n" +
                "\nDescription:\n" +
                "  A TPM Owner authorized command that returns the public portion of the EK or SRK.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 14.5" ),
            new TPMCommandDescription( 0x00000082, "TPM_ORD_GetAuditEvent", "Input:\n" +
                "  None specified.\n" +
                "\nOutput:\n" +
                "  None specified.\n" +
                "\nDescription:\n" +
                "  Deleted from Specification.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 28.4" ),
            new TPMCommandDescription( 0x00000083, "TPM_ORD_GetAuditEventSigned", "Input:\n" +
                "  None specified.\n" +
                "\nOutput:\n" +
                "  None specified.\n" +
                "\nDescription:\n" +
                "  Deleted from Specification.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 28.5" ),
            new TPMCommandDescription( 0x00000085, "TPM_ORD_GetAuditDigest", "Input:\n" +
                "  startOrdinal - The starting ordinal for the list of audited ordinals\n" +
                "\nOutput:\n" +
                "  counterValue - The current value of the audit monotonic counter\n" +
                "  auditDigest - Log of all audited events\n" +
                "  more - TRUE if the output does not contain a full list of audited ordinals\n" +
                "  ordSize - Size of the ordinal list in bytes\n" +
                "  ordList - List of ordinals that are audited\n" +
                "\nDescription:\n" +
                "  This returns the current audit digest. The external audit log has the responsibility to track the parameters that constitute the audit digest.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 8.3" ),
            new TPMCommandDescription( 0x00000086, "TPM_ORD_GetAuditDigestSigned", "Input:\n" +
                "  keyHandle - The handle of a loaded key that can perform digital signatures.\n" +
                "  closeAudit - Indication if audit session should be closed\n" +
                "  antiReplay - A nonce to prevent replay attacks\n" +
                "  authHandle - The authorization session handle used for key authentication.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  keyAuth - Authorization. HMAC key: key.usageAuth.\n" +
                "\nOutput:\n" +
                "  counterValue - The value of the audit monotonic counter\n" +
                "  auditDigest - Log of all audited events\n" +
                "  ordinalDigest - Digest of all audited ordinals\n" +
                "  sigSize - The size of the sig parameter\n" +
                "  sig - The signature of the area\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - Authorization HMAC key: key.usageAuth.\n" +
                "\nDescription:\n" +
                "  The signing of the audit log returns the entire digest value and the list of currently audited commands.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 8.4" ),
            new TPMCommandDescription( 0x0000008C, "TPM_ORD_GetOrdinalAuditStatus", "Input:\n" +
                "  ordinalToQuery - The ordinal whose audit flag is to be queried\n" +
                "\nOutput:\n" +
                "  State - Value of audit flag for ordinalToQuery\n" +
                "\nDescription:\n" +
                "  Get the status of the audit flag for the given ordinal.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 28.2" ),
            new TPMCommandDescription( 0x0000008D, "TPM_ORD_SetOrdinalAuditStatus", "Input:\n" +
                "  ordinalToAudit - The ordinal whose audit flag is to be set\n" +
                "  auditState - Value for audit flag\n" +
                "  authHandle - The authorization session handle used for owner authentication.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: ownerAuth.\n" +
                "\nDescription:\n" +
                "  Set the audit flag for a given ordinal. Requires the authentication of the TPM Owner.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 8.5" ),
            new TPMCommandDescription( 0x00000096, "TPM_ORD_Terminate_Handle", "Input:\n" +
                "  handle - The handle to terminate \n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This allows the TPM manager to clear out information in a session handle.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 27.1.2" ),
            new TPMCommandDescription( 0x00000097, "TPM_ORD_Init", "Input:\n" +
                "  None.\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  TPM_Init is a physical method of initializing a TPM. There is no TPM_Init ordinal as this is a platform message sent on the platform internals to the TPM.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 3.1" ),
            new TPMCommandDescription( 0x00000098, "TPM_ORD_SaveState", "Input:\n" +
                "  None.\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This warns a TPM to save some state information.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 3.3" ),
            new TPMCommandDescription( 0x00000099, "TPM_ORD_Startup", "Input:\n" +
                "  startupType - Type of startup that is occurring.\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  TPM_Startup is always preceded by TPM_Init, which is the physical indication (a systemwide reset) that TPM initialization is necessary.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 3.2" ),
            new TPMCommandDescription( 0x0000009A, "TPM_ORD_SetRedirection", "Input:\n" +
                "  keyHandle - The keyHandle identifier of a loaded key that can implement redirection.\n" +
                "  redirCmd - The command to execute\n" +
                "  inputDataSize - The size of the input data\n" +
                "  inputData - Manufacturer parameter\n" +
                "  authHandle - The authorization session handle used for keyHandle authorization\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - HMAC key ownerAuth\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: key.usageAuth\n" +
                "\nDescription:\n" +
                "  The redirection command attaches a key to a redirection receiver.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 9.2" ),
            new TPMCommandDescription( 0x000000A0, "TPM_ORD_SHA1Start", "Input:\n" +
                "  None.\n" +
                "\nOutput:\n" +
                "  maxNumBytes - Maximum number of bytes that can be sent to TPM_SHA1Update. Must be a multiple of 64 bytes.\n" +
                "\nDescription:\n" +
                "  This capability starts the process of calculating a SHA-1 digest.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 13.1" ),
            new TPMCommandDescription( 0x000000A1, "TPM_ORD_SHA1Update", "Input:\n" +
                "  numBytes - The number of bytes in hashData. Must be a multiple of 64 bytes.\n" +
                "  hashData - Bytes to be hashed\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This capability inputs complete blocks of data into a pending SHA-1 digest. At the end of the process, the digest remains pending.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 13.2" ),
            new TPMCommandDescription( 0x000000A2, "TPM_ORD_SHA1Complete", "Input:\n" +
                "  hashDataSize - Number of bytes in hashData, MUST be 64 or less\n" +
                "  hashData - Final bytes to be hashed\n" +
                "\nOutput:\n" +
                "  hashValue - The output of the SHA-1 hash.\n" +
                "\nDescription:\n" +
                "  This capability terminates a pending SHA-1 calculation.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 13.3" ),
            new TPMCommandDescription( 0x000000A3, "TPM_ORD_SHA1CompleteExtend", "Input:\n" +
                "  pcrNum - Index of the PCR to be modified\n" +
                "  hashDataSize - Number of bytes in hashData, MUST be 64 or less\n" +
                "  hashData - Final bytes to be hashe\n" +
                "\nOutput:\n" +
                "  hashValue - The output of the SHA-1 hash.\n" +
                "  outDigest - The PCR value after execution of the command\n" +
                "\nDescription:\n" +
                "  This capability terminates a pending SHA-1 calculation and EXTENDS the result into a Platform Configuration Register using a SHA-1 hash process.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 13.4" ),
            new TPMCommandDescription( 0x000000AA, "TPM_ORD_FieldUpgrade", "Input:\n" +
                "  None specified.\n" +
                "\nOutput:\n" +
                "  None specified.\n" +
                "\nDescription:\n" +
                "  The TPM needs a mechanism to allow for updating the protected capabilities once a TPM is in the field. Given the varied nature of TPM implementations there will be numerous methods of performing an upgrade of the protected capabilities. This command, when implemented, provides a manufacturer specific method of performing the upgrade.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 9.1" ),
            new TPMCommandDescription( 0x000000B4, "TPM_ORD_SaveKeyContext", "Input:\n" +
                "  keyHandle - The key which will be kept outside the TPM\n" +
                "\nOutput:\n" +
                "  keyContextSize - The actual size of the outgoing key context blob. If the command fails the value will be\n" +
                "  keyContextBlob - The key context blob.\n" +
                "\nDescription:\n" +
                "  TPM_SaveKeyContext saves a loaded key outside the TPM. After creation of the key context blob the TPM automatically releases the internal memory used by that key. The format of the key context blob is specific to a TPM.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 27.2.1" ),
            new TPMCommandDescription( 0x000000B5, "TPM_ORD_LoadKeyContext", "Input:\n" +
                "  keyContextSize - The size of the following key context blob.\n" +
                "  keyContextBlob - The key context blob\n" +
                "\nOutput:\n" +
                "  keyHandle - The handle assigned to the key after it has been successfully loaded.\n" +
                "\nDescription:\n" +
                "  TPM_LoadKeyContext loads a key context blob into the TPM previously retrieved by a TPM_SaveKeyContext call. After successful completion the handle returned by this command can be used to access the key.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 27.2.2" ),
            new TPMCommandDescription( 0x000000B6, "TPM_ORD_SaveAuthContext", "Input:\n" +
                "  authHandle - Authorization session which will be kept outside the TPM \n" +
                "\nOutput:\n" +
                "  authContextSize - The actual size of the outgoing authorization context blob. If the command fails the value will be 0.\n" +
                "  authContextBlob - The authorization context blob.\n" +
                "\nDescription:\n" +
                "  TPM_SaveAuthContext saves a loaded authorization session outside the TPM. After creation of the authorization context blob, the TPM automatically releases the internal memory used by that session. The format of the authorization context blob is specific to a TPM.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 27.2.3" ),
            new TPMCommandDescription( 0x000000B7, "TPM_ORD_LoadAuthContext", "Input:\n" +
                "  authContextSize - The size of the following authorization context blob.\n" +
                "  authContextBlob - The authorization context blob.\n" +
                "\nOutput:\n" +
                "  authHandle - The handle assigned to the authorization session after it has been successfully loaded.\n" +
                "\nDescription:\n" +
                "  TPM_LoadAuthContext loads an authorization context blob into the TPM previously retrieved by a TPM_SaveAuthContext call. After successful completion, the handle returned by this command can be used to access the authorization session.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 27.2.4" ),
            new TPMCommandDescription( 0x000000B8, "TPM_ORD_SaveContext", "Input:\n" +
                "  handle - Handle of the resource being saved.\n" +
                "  resourceType - The type of resource that is being saved\n" +
                "  label - Label for identification purposes\n" +
                "\nOutput:\n" +
                "  contextSize - The actual size of the outgoing context blob\n" +
                "  contextBlob - The context blob\n" +
                "\nDescription:\n" +
                "  TPM_SaveContext saves a loaded resource outside the TPM. After successful execution of the command, the TPM automatically releases the internal memory for sessions but leaves keys in place.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 21.2" ),
            new TPMCommandDescription( 0x000000B9, "TPM_ORD_LoadContext", "Input:\n" +
                "  entityHandle - The handle the TPM MUST use to locate the entity tied to the OSAP/DSAP session\n" +
                "  keepHandle - Indication if the handle MUST be preserved\n" +
                "  contextSize - The size of the following context blob.\n" +
                "  contextBlob - The context blob\n" +
                "\nOutput:\n" +
                "  handle - The handle assigned to the resource after it has been successfully loaded.\n" +
                "\nDescription:\n" +
                "  TPM_LoadContext loads into the TPM a previously saved context. The command returns a handle.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 21.3" ),
            new TPMCommandDescription( 0x000000BA, "TPM_ORD_FlushSpecific", "Input:\n" +
                "  handle - The handle of the item to flush\n" +
                "  resourceType - The type of resource that is being flushed\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  TPM_FlushSpecific flushes from the TPM a specific handle.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 22.1" ),
            new TPMCommandDescription( 0x000000C8, "TPM_ORD_PCR_Reset", "Input:\n" +
                "  pcrSelection - The PCR’s to reset\n" +
                "\nOutput:\n" +
                "  None\n" +
                "\nDescription:\n" +
                "  For PCR with the pcrReset attribute set to TRUE, this command resets the PCR back to the default value, this mimics the actions of TPM_Init. The PCR may have restrictions as to which locality can perform the reset operation.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 16.4" ),
            new TPMCommandDescription( 0x000000CC, "TPM_ORD_NV_DefineSpace", "Input:\n" +
                "  pubInfo - The public parameters of the NV area\n" +
                "  encAuth - The encrypted AuthData, only valid if the attributes require subsequent authorization\n" +
                "  authHandle - The authorization session handle used for ownerAuth\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - The authorization session digest HMAC key: ownerAuth\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, fixed to FALSE\n" +
                "  ownerAuth - The authorization session digest HMAC key: ownerAuth\n" +
                "\nDescription:\n" +
                "  This establishes the space necessary for the indicated index. The definition will include the access requirements for writing and reading the area.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 20.1" ),
            new TPMCommandDescription( 0x000000CD, "TPM_ORD_NV_WriteValue", "Input:\n" +
                "  nvIndex - The index of the area to set\n" +
                "  offset - The offset into the NV Area\n" +
                "  dataSize - The size of the data parameter\n" +
                "  data - The data to set the area to\n" +
                "  authHandle - The authorization session handle used for TPM Owner\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  authNonceOdd - Nonce generated by caller\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - The authorization session digest HMAC key: ownerAuth\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  authNonceOdd - Nonce generated by caller\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  ownerAuth - The authorization session digest HMAC key: ownerAuth\n" +
                "\nDescription:\n" +
                "  This command writes the value to a defined area. The write can be TPM Owner authorized or unauthorized and protected by other attributes and will work when no TPM Owner is present.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 20.2" ),
            new TPMCommandDescription( 0x000000CE, "TPM_ORD_NV_WriteValueAuth", "Input:\n" +
                "  nvIndex - The index of the area to set\n" +
                "  offset - The offset into the chunk\n" +
                "  dataSize - The size of the data area\n" +
                "  data - The data to set the area to\n" +
                "  authHandle - The authorization session handle used for NV element authorization\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  authValue - HMAC key: NV element auth value\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  authValue - HMAC key: NV element auth value\n" +
                "\nDescription:\n" +
                "  This command writes to a previously defined area. The area must require authorization to write. Use this command when authorization other than the owner authorization is to be used. Otherwise, use TPM_NV_WriteValue.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 20.3" ),
            new TPMCommandDescription( 0x000000CF, "TPM_ORD_NV_ReadValue", "Input:\n" +
                "  nvIndex - The index of the area to set\n" +
                "  offset - The offset into the area\n" +
                "  dataSize - The size of the data area\n" +
                "  authHandle - The authorization session handle used for TPM Owner authorization\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  authNonceOdd - Nonce generated by caller\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - HMAC key: ownerAuth\n" +
                "\nOutput:\n" +
                "  dataSize - The size of the data area\n" +
                "  data - The data to set the area to\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  ownerAuth - HMAC key: ownerAuth\n" +
                "\nDescription:\n" +
                "  Read a value from the NV store. This command uses optional owner authentication.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 20.4" ),
            new TPMCommandDescription( 0x000000D0, "TPM_ORD_NV_ReadValueAuth", "Input:\n" +
                "  nvIndex - The index of the area to set\n" +
                "  offset - The offset from the data area\n" +
                "  dataSize - The size of the data area\n" +
                "  authHandle - authThe auth handle for the NV element authorization\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  authNonceOdd - Nonce generated by system associated with authHandle\n" +
                "  authContinueSession - The continue use flag for the authorization session handle\n" +
                "  authHmac - HMAC key: nv element authorization\n" +
                "\nOutput:\n" +
                "  dataSize - The size of the data area\n" +
                "  data - The data\n" +
                "  authNonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  authLastNonceOdd - Nonce generated by system associated with authHandle\n" +
                "  authContinueSession - Continue use flag, TRUE if handle is still active\n" +
                "  authHmacOut - HMAC key: nv element authorization\n" +
                "\nDescription:\n" +
                "  This command requires that the read be authorized by a value set with the blob.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 20.5" ),
            new TPMCommandDescription( 0x000000D1, "TPM_ORD_Delegate_UpdateVerification", "Input:\n" +
                "  inputSize - The size of inputData\n" +
                "  inputData - TPM_DELEGATE_KEY_BLOB or TPM_DELEGATE_OWNER_BLOB or TPM_DELEGATE_INDEX\n" +
                "  authHandle - The authorization session handle used for owner authentication.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - Authorization HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  outputSize - The size of the output\n" +
                "  outputData - TPM_DELEGATE_KEY_BLOB or TPM_DELEGATE_OWNER_BLOB\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: ownerAuth.\n" +
                "\nDescription:\n" +
                "  TPM_UpdateVerification sets the verificationCount in an entity (a blob or a delegation row) to the current family value, in order that the delegations represented by that entity will continue to be accepted by the TPM.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 19.6" ),
            new TPMCommandDescription( 0x000000D2, "TPM_ORD_Delegate_Manage", "Input:\n" +
                "  familyID - The familyID that is to be managed\n" +
                "  opCode - Operation to be performed by this command.\n" +
                "  opDataSize - Size in bytes of opData\n" +
                "  opData - Data necessary to implement opCode\n" +
                "  authHandle - The authorization session handle used for owner authentication.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - HMAC key: ownerAuth.\n" +
                "\nOutput:\n" +
                "  retDataSize - Size in bytes of retData\n" +
                "  retData - Returned data\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - HMAC key: ownerAuth\n" +
                "\nDescription:\n" +
                "  TPM_Delegate_Manage is the fundamental process for managing the Family tables, including enabling/disabling Delegation for a selected Family. Normally TPM_Delegate_Manage must be executed at least once (to create Family tables for a particular family) before any other type of Delegation command in that family can succeed.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 19.1" ),
            new TPMCommandDescription( 0x000000D4, "TPM_ORD_Delegate_CreateKeyDelegation", "Input:\n" +
                "  keyHandle - The keyHandle identifier of a loaded key.\n" +
                "  publicInfo - The public information necessary to fill in the blob\n" +
                "  delAuth - The encrypted new AuthData for the blob. The encryption key is the shared secret from the authorization session protocol.\n" +
                "  authHandle - The authorization session handle used for keyHandle authorization\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Ignored\n" +
                "  privAuth - The authorization session dig\n" +
                "\nOutput:\n" +
                "  blobSize - The length of the returned blob\n" +
                "  blob - The partially encrypted delegation information.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag. Fixed value of FALSE\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: key.usageAuth\n" +
                "\nDescription:\n" +
                "  This command delegates privilege to use a key by creating a blob that can be used by TPM_DSAP.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 19.2" ),
            new TPMCommandDescription( 0x000000D5, "TPM_ORD_Delegate_CreateOwnerDelegation", "Input:\n" +
                "  increment - Flag dictates whether verificationCount will be incremented\n" +
                "  publicInfo - The public parameters for the blob\n" +
                "  delAuth - The encrypted new AuthData for the blob. The encryption key is the shared secret from the OSAP protocol.\n" +
                "  authHandle - The authorization session handle TPM Owner authentication\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Ignored\n" +
                "  ownerAuth - The authorization session digest. HMAC key:ownerAuth\n" +
                "\nOutput:\n" +
                "  blobSize - The length of the returned blob\n" +
                "  blob - The partially encrypted delegation information.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag. Fixed value of FALSE\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: ownerAuth\n" +
                "\nDescription:\n" +
                "  TPM_Delegate_CreateOwnerDelegation delegates the Owner’s privilege to use a set of command ordinals, by creating a blob. Such blobs can be used as input data for TPM_DSAP or TPM_Delegate_LoadOwnerDelegation.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 19.3" ),
            new TPMCommandDescription( 0x000000D6, "TPM_ORD_Delegate_VerifyDelegation", "Input:\n" +
                "  delegationSize - The length of the delegated information blob\n" +
                "  delegation - TPM_DELEGATE_KEY_BLOB or TPM_DELEGATE_OWNER_BLOB.\n" +
                "\nOutput:\n" +
                "  None..\n" +
                "\nDescription:\n" +
                "  TPM_VerifyDelegation interprets a delegate blob and returns success or failure, depending on whether the blob is currently valid. The delegate blob is NOT loaded into the TPM.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, 19.7" ),
            new TPMCommandDescription( 0x000000D8, "TPM_ORD_Delegate_LoadOwnerDelegation", "Input:\n" +
                "  index - The index of the delegate row to be written\n" +
                "  blobSize - The size of the delegate blob\n" +
                "  blob - Delegation information, including encrypted portions as appropriate\n" +
                "  authHandle - The authorization session handle TPM Owner authentication\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - The authorization session digest. HMAC key:ownerAuth\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - Authorization HMAC key: ownerAuth.\n" +
                "\nDescription:\n" +
                "  This command loads a delegate table row blob into a non-volatile delegate table row. TPM_Delegate_LoadOwnerDelegation can be used during manufacturing or on first boot (when no Owner is installed), or after an Owner is installed. If an Owner is installed, TPM_Delegate_LoadOwnerDelegation requires Owner authorisation, and sensitive information must be encrypted.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 19.4" ),
            new TPMCommandDescription( 0x000000DB, "TPM_ORD_Delegate_ReadTable", "Input:\n" +
                "  None.\n" +
                "\nOutput:\n" +
                "  familyTableSize - Size in bytes of familyTable\n" +
                "  familyTable - Array of TPM_FAMILY_TABLE_ENTRY elements\n" +
                "  delegateTableSize - Size in bytes of delegateTable\n" +
                "  delegateTable - Array of TPM_DELEGATE_INDEX and TPM_DELEGATE_PUBLIC elements\n" +
                "\nDescription:\n" +
                "  This command reads from the TPM the public contents of the family and delegate tables that are stored on the TPM. Such data is required during external verification of tables..\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 19.5" ),
            new TPMCommandDescription( 0x000000DC, "TPM_ORD_CreateCounter", "Input:\n" +
                "  encAuth - The encrypted auth data for the new counter\n" +
                "  label - Label to associate with counter\n" +
                "  authHandle - The authorization session handle used for owner authentication.\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Ignored\n" +
                "  ownerAuth - Authorization ownerAuth\n" +
                "\nOutput:\n" +
                "  countID - The handle for the counter\n" +
                "  counterValue - The starting counter value\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Fixed value of FALSE\n" +
                "  resAuth - Authorization. HMAC key: ownerAuth.\n" +
                "\nDescription:\n" +
                "  This command creates the counter but does not select the counter. Counter creation assigns an AuthData value to the counter and sets the counters original start value. The original start value is the current internal base value plus one. Setting the new counter to the internal base avoids attacks on the system that are attempting to use old counter values.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 25.1" ),
            new TPMCommandDescription( 0x000000DD, "TPM_ORD_IncrementCounter", "Input:\n" +
                "  countID - The handle of a valid counter\n" +
                "  authHandle - The authorization session handle used for counter authorization\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  counterAuth - The authorization session digest that authorizes the use of countID. HMAC key: countID -> authData\n" +
                "\nOutput:\n" +
                "  count - The counter value\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: countID -> authData\n" +
                "\nDescription:\n" +
                "  This authorized command increments the indicated counter by one. Once a counter has been incremented then all subsequent increments must be for the same handle until a successful TPM_Startup(ST_CLEAR) is executed.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 25.2" ),
            new TPMCommandDescription( 0x000000DE, "TPM_ORD_ReadCounter", "Input:\n" +
                "  countID - ID value of the counter\n" +
                "\nOutput:\n" +
                "  count - The counter value\n" +
                "\nDescription:\n" +
                "  Reading the counter provides the caller with the current number in the sequence..\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 25.3" ),
            new TPMCommandDescription( 0x000000DF, "TPM_ORD_ReleaseCounter", "Input:\n" +
                "  countID - ID value of the counter\n" +
                "  authHandle - The authorization session handle used for countID authorization\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce associated with countID\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  counterAuth - The authorization session digest that authorizes the use of countID. HMAC key: countID -> authData\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: countID -> authData\n" +
                "\nDescription:\n" +
                "  This command releases a counter such that no reads or increments of the indicated counter will succeed.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 25.4" ),
            new TPMCommandDescription( 0x000000E0, "TPM_ORD_ReleaseCounterOwner", "Input:\n" +
                "  countID - ID value of the counter\n" +
                "  authHandle - The authorization session handle used for owner authentication\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  ownerAuth - The authorization session digest that authorizes the inputs. HMAC key: ownerAuth\n" +
                "\nOutput:\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: ownerAuth\n" +
                "\nDescription:\n" +
                "  This command releases a counter such that no reads or increments of the indicated counter will succeed..\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 25.5" ),
            new TPMCommandDescription( 0x000000E6, "TPM_ORD_EstablishTransport", "Input:\n" +
                "  encHandle - The handle to the key that encrypted the blob\n" +
                "  transPublic - The public information describing the transport session\n" +
                "  secretSize - The size of the secret Area\n" +
                "  secret - The encrypted secret area\n" +
                "  authHandle - The authorization session handle used for keyHandle authorization\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  keyAuth - Authorization. HMAC key: encKey.usageAuth\n" +
                "\nOutput:\n" +
                "  transHandle - The handle for the transport session\n" +
                "  locality - The locality that called this command\n" +
                "  currentTicks - The current tick count\n" +
                "  transNonceEven - The even nonce in use for subsequent execute transport\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - Authorization. HMAC key: key.usageAuth\n" +
                "\nDescription:\n" +
                "  This establishes the transport session. Depending on the attributes specified for the session this may establish shared secrets, encryption keys, and session logs. The session will be in use for by the TPM_ExecuteTransport command.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 24.1" ),
            new TPMCommandDescription( 0x000000E7, "TPM_ORD_ExecuteTransport", "Input:\n" +
                "  wrappedCmdSize - Size of the wrapped command\n" +
                "  wrappedCmd - The wrapped command\n" +
                "  transHandle - The transport session handle\n" +
                "  transLastNonceEven - Even nonce previously generated by TPM\n" +
                "  transNonceOdd - Nonce generated by caller\n" +
                "  continueTransSession - The continue use flag for the authorization session handle\n" +
                "  transAuth - HMAC for transHandle key: transHandle -> authData\n" +
                "\nOutput:\n" +
                "  currentTicks - The current ticks when the command was executed\n" +
                "  locality - The locality that called this command\n" +
                "  wrappedRspSize - Size of the wrapped response\n" +
                "  wrappedRsp - The wrapped response\n" +
                "  transNonceEven - Even nonce newly generated by TPM\n" +
                "  transNonceOdd - Nonce generated by caller\n" +
                "  continueTransSession - The continue use flag for the session\n" +
                "  transAuth - HMAC for transHandle key: transHandle -> authData\n" +
                "\nDescription:\n" +
                "  Delivers a wrapped TPM command to the TPM where the TPM unwraps the command and then executes the command.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 24.2" ),
            new TPMCommandDescription( 0x000000E8, "TPM_ORD_ReleaseTransportSigned", "Input:\n" +
                "  keyHandle - Handle of a loaded key that will perform the signing\n" +
                "  antiReplay - Value provided by caller for anti-replay protection\n" +
                "  authHandle - The authorization session to use key\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  authNonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  keyAuth - The authorization session digest that authorizes the use of key. HMAC key: key -> usageAuth\n" +
                "  transHandle - The transport session handle\n" +
                "  transLastNonceEven - Even nonce in use by execute Transport\n" +
                "  transNonceOdd - Nonce supplied by caller for transport session\n" +
                "  continueTransSession - The continue use flag for the authorization session handle\n" +
                "  transAuth - HMAC for transport session key: transHandle -> authData\n" +
                "\nOutput:\n" +
                "  locality - The locality that called this command\n" +
                "  currentTicks - The current ticks when the command executed\n" +
                "  signSize - The size of the signature area\n" +
                "  signature - The signature of the digest\n" +
                "  authNonceEven - Even nonce newly generated by TPM\n" +
                "  authNonceOdd - Nonce generated by caller\n" +
                "  continueAuthSession - The continue use flag for the session\n" +
                "  keyAuth - HMAC: key -> usageAuth\n" +
                "  transNonceEven - Even nonce newly generated by TPM\n" +
                "  transNonceOdd - Nonce generated by caller\n" +
                "  continueTransSession - The continue use flag for the session\n" +
                "  transAuth - HMAC: transHandle -> authData\n" +
                "\nDescription:\n" +
                "  This command completes the transport session. If logging for this session is turned on, then this command returns a digital signature of the hash of all operations performed during the session.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 24.3" ),
            new TPMCommandDescription( 0x000000F1, "TPM_ORD_GetTick", "Input:\n" +
                "  None\n" +
                "\nOutput:\n" +
                "  currentTime - The current time held in the TPM\n" +
                "\nDescription:\n" +
                "  This command returns the current tick count of the TPM.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 23.1" ),
            new TPMCommandDescription( 0x000000F2, "TPM_ORD_TickStampBlob", "Input:\n" +
                "  keyHandle - The keyHandle identifier of a loaded key that can perform digital signatures.\n" +
                "  antiReplay - Anti replay value added to signature\n" +
                "  digestToStamp - The digest to perform the tick stamp on\n" +
                "  authHandle - The authorization session handle used for keyHandle authorization\n" +
                "  authLastNonceEven - Even nonce previously generated by TPM to cover inputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - The continue use flag for the authorization session handle\n" +
                "  privAuth - The authorization session digest that authorizes the use of keyHandle. HMAC key: key.usageAuth\n" +
                "\nOutput:\n" +
                "  currentTicks - The current time according to the TPM\n" +
                "  sigSize - The length of the returned digital signature\n" +
                "  sig - The resulting digital signature.\n" +
                "  nonceEven - Even nonce newly generated by TPM to cover outputs\n" +
                "  nonceOdd - Nonce generated by system associated with authHandle\n" +
                "  continueAuthSession - Continue use flag, TRUE if handle is still active\n" +
                "  resAuth - The authorization session digest for the returned parameters. HMAC key: key.usageAuth\n" +
                "\nDescription:\n" +
                "  This command applies a time stamp to the passed blob. The TPM makes no representation regarding the blob merely that the blob was present at the TPM at the time indicated.\n" +
                "\nReference:\n" +
                "  TPM Main Specification Version 1.2, Part 3, Section 23.2" ),
        };
        private static TPMCommandDescription[] m_TPM20Commands =
        {
            new TPMCommandDescription( 0x0000011f, "TPM2_NV_UndefineSpaceSpecial", "Input:\n" +
                "  nvIndex - Index to be deleted Auth Index: 1 Auth Role: ADMIN\n" +
                "  platform - TPM_RH_PLATFORM + {PP} Auth Index: 2 Auth Role: USER\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command allows removal of a platform-created NV Index that has TPMA_NV_POLICY_DELETE SET.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 31.5" ),
            new TPMCommandDescription( 0x00000120, "TPM2_EvictControl", "Input:\n" +
                "  auth - TPM_RH_OWNER or TPM_RH_PLATFORM+{PP} Auth Handle: 1 Auth Role: USER\n" +
                "  objectHandle - the handle of a loaded object Auth Index: None\n" +
                "  persistentHandle - if objectHandle is a transient object handle, then this is the persistent handle for the object if objectHandle is a persistent object handle, then it shall be the same value as persistentHandle\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command allows certain Ta transient Oobjects to be made persistent or a persistent object to be evicted.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 28.5" ),
            new TPMCommandDescription( 0x00000121, "TPM2_HierarchyControl", "Input:\n" +
                "  authHandle - TPM_RH_ENDORSEMENT, TPM_RH_OWNER or TPM_RH_PLATFORM+{PP} Auth Index: 1 Auth Role: USER\n" +
                "  enable - the enable being modified TPM_RH_ENDORSEMENT, TPM_RH_OWNER, TPM_RH_PLATFORM, or TPM_RH_PLATFORM_NV\n" +
                "  state - YES if the enable should be SET, NO if the enable should be CLEAR\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command enables and disables use of a hierarchy and its associated NV storage. The command allows phEnable, phEnableNV, shEnable, and ehEnable to be changed when the proper authorization is provided.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 24.2" ),
            new TPMCommandDescription( 0x00000122, "TPM2_NV_UndefineSpace", "Input:\n" +
                "  authHandle - TPM_RH_OWNER or TPM_RH_PLATFORM+{PP} Auth Index: 1 Auth Role: USER\n" +
                "  nvIndex - the NV Index to remove from NV space Auth Index: None\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command removes an Index from the TPM.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 31.4" ),
            new TPMCommandDescription( 0x00000124, "TPM2_ChangeEPS", "Input:\n" +
                "  authHandle - TPM_RH_PLATFORM+{PP} Auth Handle: 1 Auth Role: USER\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This replaces the current endorsement primary seed (EPS) with a value from the RNG and sets the Endorsement hierarchy controls to their default initialization values: ehEnable is SET, endorsementAuth and endorsementPolicy are both set equal to the Empty Buffer. It will flush any resident objects (transient or persistent) in the EndorsementPS hierarchy and not allow objects in the hierarchy associated with the previous EPS to be loaded.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 24.5" ),
            new TPMCommandDescription( 0x00000125, "TPM2_ChangePPS", "Input:\n" +
                "  authHandle - TPM_RH_PLATFORM+{PP} Auth Index: 1 Auth Role: USER\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This replaces the current platform primary seed (PPS) with a value from the RNG and sets platformPolicy to the default initialization value (the Empty Buffer).\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 24.4" ),
            new TPMCommandDescription( 0x00000126, "TPM2_Clear", "Input:\n" +
                "  authHandle - TPM_RH_LOCKOUT or TPM_RH_PLATFORM+{PP} Auth Handle: 1 Auth Role: USER\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command removes all TPM context associated with a specific Owner.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 24.6" ),
            new TPMCommandDescription( 0x00000127, "TPM2_ClearControl", "Input:\n" +
                "  auth - TPM_RH_LOCKOUT or TPM_RH_PLATFORM+{PP} Auth Handle: 1 Auth Role: USER\n" +
                "  disable - YES if the disableOwnerClear flag is to be SET, NO if the flag is to be CLEAR.\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  TPM2_ClearControl() disables and enables the execution of TPM2_Clear().\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 24.7" ),
            new TPMCommandDescription( 0x00000128, "TPM2_ClockSet", "Input:\n" +
                "  auth - TPM_RH_OWNER or TPM_RH_PLATFORM+{PP} Auth Handle: 1 Auth Role: USER\n" +
                "  newTime - new Clock setting in milliseconds\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command is used to advance the value of the TPMs Clock. The command will fail if newTime is less than the current value of Clock or if the new time is greater than FFFF00000000000016. If both of these checks succeed, Clock is set to newTime. If either of these checks fails, the TPM shall return TPM_RC_VALUE and make no change to Clock.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 29.2" ),
            new TPMCommandDescription( 0x00000129, "TPM2_HierarchyChangeAuth", "Input:\n" +
                "  authHandle - TPM_RH_LOCKOUT, TPM_RH_ENDORSEMENT, TPM_RH_OWNER or TPM_RH_PLATFORM+{PP} Auth Index: 1 Auth Role: USER\n" +
                "  newAuth - new authorization value\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command allows the authorization secret for a hierarchy or lockout to be changed using the current authorization value as the command authorization.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 24.8" ),
            new TPMCommandDescription( 0x0000012a, "TPM2_NV_DefineSpace", "Input:\n" +
                "  authHandle - TPM_RH_OWNER or TPM_RH_PLATFORM+{PP} Auth Index: 1 Auth Role: USER\n" +
                "  auth - the authorization value\n" +
                "  publicInfo - the public parameters of the NV area\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command defines the attributes of an NV Index and causes the TPM to reserve space to hold the data associated with the NV Index. If a definition already exists at the NV Index, the TPM will return TPM_RC_NV_DEFINED.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 31.3" ),
            new TPMCommandDescription( 0x0000012b, "TPM2_PCR_Allocate", "Input:\n" +
                "  authHandle - TPM_RH_PLATFORM+{PP} Auth Index: 1 Auth Role: USER\n" +
                "  pcrAllocation - the requested allocation\n" +
                "\nOutput:\n" +
                "  allocationSuccess - YES if the allocation succeeded\n" +
                "  maxPCR - maximum number of PCR that may be in a bank\n" +
                "  sizeNeeded - number of octets required to satisfy the request\n" +
                "  sizeAvailable - Number of octets available. Computed before the allocation.\n" +
                "\nDescription:\n" +
                "  This command is used to set the desired PCR allocation of PCR and algorithms. This command requires Platform Authorization.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 22.5" ),
            new TPMCommandDescription( 0x0000012c, "TPM2_PCR_SetAuthPolicy", "Input:\n" +
                "  authHandle - TPM_RH_PLATFORM+{PP} Auth Index: 1 Auth Role: USER\n" +
                "  authPolicy - the desired authPolicy\n" +
                "  hashAlg - the hash algorithm of the policy\n" +
                "  pcrNum - the PCR for which the policy is to be set\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command is used to associate a policy with a PCR or group of PCR. The policy determines the conditions under which a PCR may be extended or reset.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 22.6" ),
            new TPMCommandDescription( 0x0000012d, "TPM2_PP_Commands", "Input:\n" +
                "  auth - TPM_RH_PLATFORM+PP Auth Index: 1 Auth Role: USER + Physical Presence\n" +
                "  setList - list of commands to be added to those that will require that Physical Presence be asserted\n" +
                "  clearList - list of commands that will no longer require that Physical Presence be asserted\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command is used to determine which commands require assertion of Physical Presence (PP) in addition to platformAuth/platformPolicy.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 26.2" ),
            new TPMCommandDescription( 0x0000012e, "TPM2_SetPrimaryPolicy", "Input:\n" +
                "  authHandle - TPM_RH_LOCKOUT, TPM_RH_ENDORSEMENT, TPM_RH_OWNER or TPM_RH_PLATFORM+{PP} Auth Index: 1 Auth Role: USER\n" +
                "  authPolicy - an authorization policy digest; may be the Empty Buffer If hashAlg is TPM_ALG_NULL, then this shall be an Empty Buffer.\n" +
                "  hashAlg - the hash algorithm to use for the policy If the authPolicy is an Empty Buffer, then this field shall be TPM_ALG_NULL.\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command allows setting of the authorization policy for the lockout (lockoutPolicy), the platform hierarchy (platformPolicy), the storage hierarchy (ownerPolicy), and the endorsement hierarchy (endorsementPolicy).\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 24.3" ),
            new TPMCommandDescription( 0x0000012f, "TPM2_FieldUpgradeStart", "Input:\n" +
                "  authorization - TPM_RH_PLATFORM+{PP} Auth Index:1 Auth Role: ADMIN\n" +
                "  keyHandle - handle of a public area that contains the TPM Vendor Authorization Key that will be used to validate manifestSignature Auth Index: None\n" +
                "  fuDigest - digest of the first block in the field upgrade sequence\n" +
                "  manifestSignature - signature over fuDigest using the key associated with keyHandle (not optional)(One of SignatureRsassa, SignatureRsapss, SignatureEcdsa, SignatureEcdaa, SignatureSm2, SignatureEcschnorr, TpmHash, SchemeHash, NullSignature)\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command uses platformPolicy and a TPM Vendor Authorization Key to authorize a Field Upgrade Manifest.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 27.2" ),
            new TPMCommandDescription( 0x00000130, "TPM2_ClockRateAdjust", "Input:\n" +
                "  auth - TPM_RH_OWNER or TPM_RH_PLATFORM+{PP} Auth Handle: 1 Auth Role: USER\n" +
                "  rateAdjust - Adjustment to current Clock update rate\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command adjusts the rate of advance of Clock and Time to provide a better approximation to real time.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 29.3" ),
            new TPMCommandDescription( 0x00000131, "TPM2_CreatePrimary", "Input:\n" +
                "  primaryHandle - TPM_RH_ENDORSEMENT, TPM_RH_OWNER, TPM_RH_PLATFORM+{PP}, or TPM_RH_NULL Auth Index: 1 Auth Role: USER\n" +
                "  inSensitive - the sensitive data, see TPM 2.0 Part 1 Sensitive Values\n" +
                "  inPublic - the public template\n" +
                "  outsideInfo - data that will be included in the creation data for this object to provide permanent, verifiable linkage between this object and some object owner data\n" +
                "  creationPCR - PCR that will be used in creation data\n" +
                "\nOutput:\n" +
                "  objectHandle - handle of type TPM_HT_TRANSIENT for created Primary Object\n" +
                "  outPublic - the public portion of the created object\n" +
                "  creationData - contains a TPMT_CREATION_DATA\n" +
                "  creationHash - digest of creationData using nameAlg of outPublic\n" +
                "  creationTicket - ticket used by TPM2_CertifyCreation() to validate that the creation data was produced by the TPM\n" +
                "  name - the name of the created object\n" +
                "\nDescription:\n" +
                "  This command is used to create a Primary Object under one of the Primary Seeds or a Temporary Object under TPM_RH_NULL. The command uses a TPM2B_PUBLIC as a template for the object to be created. The command will create and load a Primary Object. The sensitive area is not returned.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 24.1" ),
            new TPMCommandDescription( 0x00000132, "TPM2_NV_GlobalWriteLock", "Input:\n" +
                "  authHandle - TPM_RH_OWNER or TPM_RH_PLATFORM+{PP} Auth Index: 1 Auth Role: USER\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  The command will SET TPMA_NV_WRITELOCKED for all indexes that have their TPMA_NV_GLOBALLOCK attribute SET.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 31.12" ),
            new TPMCommandDescription( 0x00000133, "TPM2_GetCommandAuditDigest", "Input:\n" +
                "  privacyHandle - handle of the privacy administrator (TPM_RH_ENDORSEMENT) Auth Index: 1 Auth Role: USER\n" +
                "  signHandle - the handle of the signing key Auth Index: 2 Auth Role: USER\n" +
                "  qualifyingData - other data to associate with this audit digest\n" +
                "  inScheme - signing scheme to use if the scheme for signHandle is TPM_ALG_NULL(One of SigSchemeRsassa, SigSchemeRsapss, SigSchemeEcdsa, SigSchemeEcdaa, SigSchemeSm2, SigSchemeEcschnorr, SchemeHmac, SchemeHash, NullSigScheme)\n" +
                "\nOutput:\n" +
                "  auditInfo - the auditInfo that was signed\n" +
                "  signature - the signature over auditInfo(One of SignatureRsassa, SignatureRsapss, SignatureEcdsa, SignatureEcdaa, SignatureSm2, SignatureEcschnorr, TpmHash, SchemeHash, NullSignature)\n" +
                "\nDescription:\n" +
                "  This command returns the current value of the command audit digest, a digest of the commands being audited, and the audit hash algorithm. These values are placed in an attestation structure and signed with the key referenced by signHandle.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 18.6" ),
            new TPMCommandDescription( 0x00000134, "TPM2_NV_Increment", "Input:\n" +
                "  authHandle - handle indicating the source of the authorization value Auth Index: 1 Auth Role: USER\n" +
                "  nvIndex - the NV Index to increment Auth Index: None\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command is used to increment the value in an NV Index that has TPMA_NV_COUNTER SET. The data value of the NV Index is incremented by one.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 31.8" ),
            new TPMCommandDescription( 0x00000135, "TPM2_NV_SetBits", "Input:\n" +
                "  authHandle - handle indicating the source of the authorization value Auth Index: 1 Auth Role: USER\n" +
                "  nvIndex - NV Index of the area in which the bit is to be set Auth Index: None\n" +
                "  bits - the data to OR with the current contents\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command is used to SET bits in an NV Index that was created as a bit field. Any number of bits from 0 to 64 may be SET. The contents of data are ORed with the current contents of the NV Index starting at offset.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 31.10" ),
            new TPMCommandDescription( 0x00000136, "TPM2_NV_Extend", "Input:\n" +
                "  authHandle - handle indicating the source of the authorization value Auth Index: 1 Auth Role: USER\n" +
                "  nvIndex - the NV Index to extend Auth Index: None\n" +
                "  data - the data to extend\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command extends a value to an area in NV memory that was previously defined by TPM2_NV_DefineSpace.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 31.9" ),
            new TPMCommandDescription( 0x00000137, "TPM2_NV_Write", "Input:\n" +
                "  authHandle - handle indicating the source of the authorization value Auth Index: 1 Auth Role: USER\n" +
                "  nvIndex - the NV Index of the area to write Auth Index: None\n" +
                "  data - the data to write\n" +
                "  offset - the offset into the NV Area\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command writes a value to an area in NV memory that was previously defined by TPM2_NV_DefineSpace().\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 31.7" ),
            new TPMCommandDescription( 0x00000138, "TPM2_NV_WriteLock", "Input:\n" +
                "  authHandle - handle indicating the source of the authorization value Auth Index: 1 Auth Role: USER\n" +
                "  nvIndex - the NV Index of the area to lock Auth Index: None\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  If the TPMA_NV_WRITEDEFINE or TPMA_NV_WRITE_STCLEAR attributes of an NV location are SET, then this command may be used to inhibit further writes of the NV Index.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 31.11" ),
            new TPMCommandDescription( 0x00000139, "TPM2_DictionaryAttackLockReset", "Input:\n" +
                "  lockHandle - TPM_RH_LOCKOUT Auth Index: 1 Auth Role: USER\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command cancels the effect of a TPM lockout due to a number of successive authorization failures. If this command is properly authorized, the lockout counter is set to zero.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 25.2" ),
            new TPMCommandDescription( 0x0000013a, "TPM2_DictionaryAttackParameters", "Input:\n" +
                "  lockHandle - TPM_RH_LOCKOUT Auth Index: 1 Auth Role: USER\n" +
                "  newMaxTries - count of authorization failures before the lockout is imposed\n" +
                "  newRecoveryTime - time in seconds before the authorization failure count is automatically decremented A value of zero indicates that DA protection is disabled.\n" +
                "  lockoutRecovery - time in seconds after a lockoutAuth failure before use of lockoutAuth is allowed A value of zero indicates that a reboot is required.\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command changes the lockout parameters.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 25.3" ),
            new TPMCommandDescription( 0x0000013b, "TPM2_NV_ChangeAuth", "Input:\n" +
                "  nvIndex - handle of the entity Auth Index: 1 Auth Role: ADMIN\n" +
                "  newAuth - new authorization value\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command allows the authorization secret for an NV Index to be changed.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 31.15" ),
            new TPMCommandDescription( 0x0000013c, "TPM2_PCR_Event", "Input:\n" +
                "  pcrHandle - Handle of the PCR Auth Handle: 1 Auth Role: USER\n" +
                "  eventData - Event data in sized buffer\n" +
                "\nOutput:\n" +
                "  digests - contain the list of tagged digests of eventData that was computed\n" +
                "\nDescription:\n" +
                "  This command is used to cause an update to the indicated PCR.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 22.3" ),
            new TPMCommandDescription( 0x0000013d, "TPM2_PCR_Reset", "Input:\n" +
                "  pcrHandle - the PCR to reset Auth Index: 1 Auth Role: USER\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  If the attribute of a PCR allows the PCR to be reset and proper authorization is provided, then this command may be used to set the PCR to zero. The attributes of the PCR may restrict the locality that can perform the reset operation.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 22.8" ),
            new TPMCommandDescription( 0x0000013e, "TPM2_SequenceComplete", "Input:\n" +
                "  sequenceHandle - authorization for the sequence Auth Index: 1 Auth Role: USER\n" +
                "  buffer - data to be added to the hash/HMAC\n" +
                "  hierarchy - hierarchy of the ticket for a hash\n" +
                "\nOutput:\n" +
                "  result - the returned HMAC or digest in a sized buffer\n" +
                "  validation - ticket indicating that the sequence of octets used to compute outDigest did not start with TPM_GENERATED_VALUE This is a NULL Ticket when the sequence is HMAC.\n" +
                "\nDescription:\n" +
                "  This command adds the last part of data, if any, to a hash/HMAC sequence and returns the result.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 17.5" ),
            new TPMCommandDescription( 0x0000013f, "TPM2_SetAlgorithmSet", "Input:\n" +
                "  authHandle - TPM_RH_PLATFORM Auth Index: 1 Auth Role: USER\n" +
                "  algorithmSet - a TPM vendor-dependent value indicating the algorithm set selection\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command allows the platform to change the set of algorithms that are used by the TPM. The algorithmSet setting is a vendor-dependent value.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 26.3" ),
            new TPMCommandDescription( 0x00000140, "TPM2_SetCommandCodeAuditStatus", "Input:\n" +
                "  auth - TPM_RH_OWNER or TPM_RH_PLATFORM+{PP} Auth Index: 1 Auth Role: USER\n" +
                "  auditAlg - hash algorithm for the audit digest; if TPM_ALG_NULL, then the hash is not changed\n" +
                "  setList - list of commands that will be added to those that will be audited\n" +
                "  clearList - list of commands that will no longer be audited\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command may be used by the Privacy Administrator or platform to change the audit status of a command or to set the hash algorithm used for the audit digest, but not both at the same time.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 21.2" ),
            new TPMCommandDescription( 0x00000141, "TPM2_FieldUpgradeData", "Input:\n" +
                "  fuData - field upgrade image data\n" +
                "\nOutput:\n" +
                "  nextDigest - tagged digest of the next block TPM_ALG_NULL if field update is complete\n" +
                "  firstDigest - tagged digest of the first block of the sequence\n" +
                "\nDescription:\n" +
                "  This command will take the actual field upgrade image to be installed on the TPM. The exact format of fuData is vendor-specific. This command is only possible following a successful TPM2_FieldUpgradeStart(). If the TPM has not received a properly authorized TPM2_FieldUpgradeStart(), then the TPM shall return TPM_RC_FIELDUPGRADE.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 27.3" ),
            new TPMCommandDescription( 0x00000142, "TPM2_IncrementalSelfTest", "Input:\n" +
                "  toTest - list of algorithms that should be tested\n" +
                "\nOutput:\n" +
                "  toDoList - list of algorithms that need testing\n" +
                "\nDescription:\n" +
                "  This command causes the TPM to perform a test of the selected algorithms.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 10.3" ),
            new TPMCommandDescription( 0x00000143, "TPM2_SelfTest", "Input:\n" +
                "  fullTest - YES if full test to be performed NO if only test of untested functions required\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command causes the TPM to perform a test of its capabilities. If the fullTest is YES, the TPM will test all functions. If fullTest = NO, the TPM will only test those functions that have not previously been tested.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 10.2" ),
            new TPMCommandDescription( 0x00000144, "TPM2_Startup", "Input:\n" +
                "  startupType - TPM_SU_CLEAR or TPM_SU_STATE\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  TPM2_Startup() is always preceded by _TPM_Init, which is the physical indication that TPM initialization is necessary because of a system-wide reset. TPM2_Startup() is only valid after _TPM_Init. Additional TPM2_Startup() commands are not allowed after it has completed successfully. If a TPM requires TPM2_Startup() and another command is received, or if the TPM receives TPM2_Startup() when it is not required, the TPM shall return TPM_RC_INITIALIZE.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 9.3" ),
            new TPMCommandDescription( 0x00000145, "TPM2_Shutdown", "Input:\n" +
                "  shutdownType - TPM_SU_CLEAR or TPM_SU_STATE\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command is used to prepare the TPM for a power cycle. The shutdownType parameter indicates how the subsequent TPM2_Startup() will be processed.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 9.4" ),
            new TPMCommandDescription( 0x00000146, "TPM2_StirRandom", "Input:\n" +
                "  inData - additional information\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command is used to add 'additional information' to the RNG state.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 16.2" ),
            new TPMCommandDescription( 0x00000147, "TPM2_ActivateCredential", "Input:\n" +
                "  activateHandle - handle of the object associated with certificate in credentialBlob Auth Index: 1 Auth Role: ADMIN\n" +
                "  keyHandle - loaded key used to decrypt the TPMS_SENSITIVE in credentialBlob Auth Index: 2 Auth Role: USER\n" +
                "  credentialBlob - the credential\n" +
                "  secret - keyHandle algorithm-dependent encrypted seed that protects credentialBlob\n" +
                "\nOutput:\n" +
                "  certInfo - the decrypted certificate information the data should be no larger than the size of the digest of the nameAlg associated with keyHandle\n" +
                "\nDescription:\n" +
                "  This command enables the association of a credential with an object in a way that ensures that the TPM has validated the parameters of the credentialed object.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 12.5" ),
            new TPMCommandDescription( 0x00000148, "TPM2_Certify", "Input:\n" +
                "  objectHandle - handle of the object to be certified Auth Index: 1 Auth Role: ADMIN\n" +
                "  signHandle - handle of the key used to sign the attestation structure Auth Index: 2 Auth Role: USER\n" +
                "  qualifyingData - user provided qualifying data\n" +
                "  inScheme - signing scheme to use if the scheme for signHandle is TPM_ALG_NULL(One of SigSchemeRsassa, SigSchemeRsapss, SigSchemeEcdsa, SigSchemeEcdaa, SigSchemeSm2, SigSchemeEcschnorr, SchemeHmac, SchemeHash, NullSigScheme)\n" +
                "\nOutput:\n" +
                "  certifyInfo - the structure that was signed\n" +
                "  signature - the asymmetric signature over certifyInfo using the key referenced by signHandle(One of SignatureRsassa, SignatureRsapss, SignatureEcdsa, SignatureEcdaa, SignatureSm2, SignatureEcschnorr, TpmHash, SchemeHash, NullSignature)\n" +
                "\nDescription:\n" +
                "  The purpose of this command is to prove that an object with a specific Name is loaded in the TPM. By certifying that the object is loaded, the TPM warrants that a public area with a given Name is self-consistent and associated with a valid sensitive area. If a relying party has a public area that has the same Name as a Name certified with this command, then the values in that public area are correct.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 18.2" ),
            new TPMCommandDescription( 0x00000149, "TPM2_PolicyNV", "Input:\n" +
                "  authHandle - handle indicating the source of the authorization value Auth Index: 1 Auth Role: USER\n" +
                "  nvIndex - the NV Index of the area to read Auth Index: None\n" +
                "  policySession - handle for the policy session being extended Auth Index: None\n" +
                "  operandB - the second operand\n" +
                "  offset - the offset in the NV Index for the start of operand A\n" +
                "  operation - the comparison to make\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command is used to cause conditional gating of a policy based on the contents of an NV Index.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 23.9" ),
            new TPMCommandDescription( 0x0000014a, "TPM2_CertifyCreation", "Input:\n" +
                "  signHandle - handle of the key that will sign the attestation block Auth Index: 1 Auth Role: USER\n" +
                "  objectHandle - the object associated with the creation data Auth Index: None\n" +
                "  qualifyingData - user-provided qualifying data\n" +
                "  creationHash - hash of the creation data produced by TPM2_Create() or TPM2_CreatePrimary()\n" +
                "  inScheme - signing scheme to use if the scheme for signHandle is TPM_ALG_NULL(One of SigSchemeRsassa, SigSchemeRsapss, SigSchemeEcdsa, SigSchemeEcdaa, SigSchemeSm2, SigSchemeEcschnorr, SchemeHmac, SchemeHash, NullSigScheme)\n" +
                "  creationTicket - ticket produced by TPM2_Create() or TPM2_CreatePrimary()\n" +
                "\nOutput:\n" +
                "  certifyInfo - the structure that was signed\n" +
                "  signature - the signature over certifyInfo(One of SignatureRsassa, SignatureRsapss, SignatureEcdsa, SignatureEcdaa, SignatureSm2, SignatureEcschnorr, TpmHash, SchemeHash, NullSignature)\n" +
                "\nDescription:\n" +
                "  This command is used to prove the association between an object and its creation data. The TPM will validate that the ticket was produced by the TPM and that the ticket validates the association between a loaded public area and the provided hash of the creation data (creationHash).\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 18.3" ),
            new TPMCommandDescription( 0x0000014b, "TPM2_Duplicate", "Input:\n" +
                "  objectHandle - loaded object to duplicate Auth Index: 1 Auth Role: DUP\n" +
                "  newParentHandle - shall reference the public area of an asymmetric key Auth Index: None\n" +
                "  encryptionKeyIn - optional symmetric encryption key The size for this key is set to zero when the TPM is to generate the key. This parameter may be encrypted.\n" +
                "  symmetricAlg - definition for the symmetric algorithm to be used for the inner wrapper may be TPM_ALG_NULL if no inner wrapper is applied\n" +
                "\nOutput:\n" +
                "  encryptionKeyOut - If the caller provided an encryption key or if symmetricAlg was TPM_ALG_NULL, then this will be the Empty Buffer; otherwise, it shall contain the TPM-generated, symmetric encryption key for the inner wrapper.\n" +
                "  duplicate - private area that may be encrypted by encryptionKeyIn; and may be doubly encrypted\n" +
                "  outSymSeed - seed protected by the asymmetric algorithms of new parent (NP)\n" +
                "\nDescription:\n" +
                "  This command duplicates a loaded object so that it may be used in a different hierarchy. The new parent key for the duplicate may be on the same or different TPM or TPM_RH_NULL. Only the public area of newParentHandle is required to be loaded.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 13.1" ),
            new TPMCommandDescription( 0x0000014c, "TPM2_GetTime", "Input:\n" +
                "  privacyAdminHandle - handle of the privacy administrator (TPM_RH_ENDORSEMENT) Auth Index: 1 Auth Role: USER\n" +
                "  signHandle - the keyHandle identifier of a loaded key that can perform digital signatures Auth Index: 2 Auth Role: USER\n" +
                "  qualifyingData - data to tick stamp\n" +
                "  inScheme - signing scheme to use if the scheme for signHandle is TPM_ALG_NULL(One of SigSchemeRsassa, SigSchemeRsapss, SigSchemeEcdsa, SigSchemeEcdaa, SigSchemeSm2, SigSchemeEcschnorr, SchemeHmac, SchemeHash, NullSigScheme)\n" +
                "\nOutput:\n" +
                "  timeInfo - standard TPM-generated attestation block\n" +
                "  signature - the signature over timeInfo(One of SignatureRsassa, SignatureRsapss, SignatureEcdsa, SignatureEcdaa, SignatureSm2, SignatureEcschnorr, TpmHash, SchemeHash, NullSignature)\n" +
                "\nDescription:\n" +
                "  This command returns the current values of Time and Clock.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 18.7" ),
            new TPMCommandDescription( 0x0000014d, "TPM2_GetSessionAuditDigest", "Input:\n" +
                "  privacyAdminHandle - handle of the privacy administrator (TPM_RH_ENDORSEMENT) Auth Index: 1 Auth Role: USER\n" +
                "  signHandle - handle of the signing key Auth Index: 2 Auth Role: USER\n" +
                "  sessionHandle - handle of the audit session Auth Index: None\n" +
                "  qualifyingData - user-provided qualifying data  may be zero-length\n" +
                "  inScheme - signing scheme to use if the scheme for signHandle is TPM_ALG_NULL(One of SigSchemeRsassa, SigSchemeRsapss, SigSchemeEcdsa, SigSchemeEcdaa, SigSchemeSm2, SigSchemeEcschnorr, SchemeHmac, SchemeHash, NullSigScheme)\n" +
                "\nOutput:\n" +
                "  auditInfo - the audit information that was signed\n" +
                "  signature - the signature over auditInfo(One of SignatureRsassa, SignatureRsapss, SignatureEcdsa, SignatureEcdaa, SignatureSm2, SignatureEcschnorr, TpmHash, SchemeHash, NullSignature)\n" +
                "\nDescription:\n" +
                "  This command returns a digital signature of the audit session digest.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 18.5" ),
            new TPMCommandDescription( 0x0000014e, "TPM2_NV_Read", "Input:\n" +
                "  authHandle - the handle indicating the source of the authorization value Auth Index: 1 Auth Role: USER\n" +
                "  nvIndex - the NV Index to be read Auth Index: None\n" +
                "  size - number of octets to read\n" +
                "  offset - octet offset into the area This value shall be less than or equal to the size of the nvIndex data.\n" +
                "\nOutput:\n" +
                "  data - the data read\n" +
                "\nDescription:\n" +
                "  This command reads a value from an area in NV memory previously defined by TPM2_NV_DefineSpace().\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 31.13" ),
            new TPMCommandDescription( 0x0000014f, "TPM2_NV_ReadLock", "Input:\n" +
                "  authHandle - the handle indicating the source of the authorization value Auth Index: 1 Auth Role: USER\n" +
                "  nvIndex - the NV Index to be locked Auth Index: None\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  If TPMA_NV_READ_STCLEAR is SET in an Index, then this command may be used to prevent further reads of the NV Index until the next TPM2_Startup (TPM_SU_CLEAR).\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 31.14" ),
            new TPMCommandDescription( 0x00000150, "TPM2_ObjectChangeAuth", "Input:\n" +
                "  objectHandle - handle of the object Auth Index: 1 Auth Role: ADMIN\n" +
                "  parentHandle - handle of the parent Auth Index: None\n" +
                "  newAuth - new authorization value\n" +
                "\nOutput:\n" +
                "  outPrivate - private area containing the new authorization value\n" +
                "\nDescription:\n" +
                "  This command is used to change the authorization secret for a TPM-resident object.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 12.8" ),
            new TPMCommandDescription( 0x00000151, "TPM2_PolicySecret", "Input:\n" +
                "  authHandle - handle for an entity providing the authorization Auth Index: 1 Auth Role: USER\n" +
                "  policySession - handle for the policy session being extended Auth Index: None\n" +
                "  nonceTPM - the policy nonce for the session This can be the Empty Buffer.\n" +
                "  cpHashA - digest of the command parameters to which this authorization is limited This not the cpHash for this command but the cpHash for the command to which this policy session will be applied. If it is not limited, the parameter will be the Empty Buffer.\n" +
                "  policyRef - a reference to a policy relating to the authorization  may be the Empty Buffer Size is limited to be no larger than the nonce size supported on the TPM.\n" +
                "  expiration - time when authorization will expire, measured in seconds from the time that nonceTPM was generated If expiration is non-negative, a NULL Ticket is returned. See 23.2.5.\n" +
                "\nOutput:\n" +
                "  timeout - implementation-specific time value used to indicate to the TPM when the ticket expires; this ticket will use the TPMT_ST_AUTH_SECRET structure tag\n" +
                "  policyTicket - produced if the command succeeds and expiration in the command was non-zero. See 23.2.5\n" +
                "\nDescription:\n" +
                "  This command includes a secret-based authorization to a policy. The caller proves knowledge of the secret value using an authorization session using the authValue associated with authHandle. A password session, an HMAC session, or a policy session containing TPM2_PolicyAuthValue() or TPM2_PolicyPassword() will satisfy this requirement.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 23.4" ),
            new TPMCommandDescription( 0x00000152, "TPM2_Rewrap", "Input:\n" +
                "  oldParent - parent of object Auth Index: 1 Auth Role: User\n" +
                "  newParent - new parent of the object Auth Index: None\n" +
                "  inDuplicate - an object encrypted using symmetric key derived from inSymSeed\n" +
                "  name - the Name of the object being rewrapped\n" +
                "  inSymSeed - seed for symmetric key needs oldParent private key to recover the seed and generate the symmetric key\n" +
                "\nOutput:\n" +
                "  outDuplicate - an object encrypted using symmetric key derived from outSymSeed\n" +
                "  outSymSeed - seed for a symmetric key protected by newParent asymmetric key\n" +
                "\nDescription:\n" +
                "  This command allows the TPM to serve in the role as a Duplication Authority. If proper authorization for use of the oldParent is provided, then an HMAC key and a symmetric key are recovered from inSymSeed and used to integrity check and decrypt inDuplicate. A new protection seed value is generated according to the methods appropriate for newParent and the blob is re-encrypted and a new integrity value is computed. The re-encrypted blob is returned in outDuplicate and the symmetric key returned in outSymKey.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 13.2" ),
            new TPMCommandDescription( 0x00000153, "TPM2_Create", "Input:\n" +
                "  parentHandle - handle of parent for new object Auth Index: 1 Auth Role: USER\n" +
                "  inSensitive - the sensitive data\n" +
                "  inPublic - the public template\n" +
                "  outsideInfo - data that will be included in the creation data for this object to provide permanent, verifiable linkage between this object and some object owner data\n" +
                "  creationPCR - PCR that will be used in creation data\n" +
                "\nOutput:\n" +
                "  outPrivate - the private portion of the object\n" +
                "  outPublic - the public portion of the created object\n" +
                "  creationData - contains a TPMS_CREATION_DATA\n" +
                "  creationHash - digest of creationData using nameAlg of outPublic\n" +
                "  creationTicket - ticket used by TPM2_CertifyCreation() to validate that the creation data was produced by the TPM\n" +
                "\nDescription:\n" +
                "  This command is used to create an object that can be loaded into a TPM using TPM2_Load(). If the command completes successfully, the TPM will create the new object and return the objects creation data (creationData), its public area (outPublic), and its encrypted sensitive area (outPrivate). Preservation of the returned data is the responsibility of the caller. The object will need to be loaded (TPM2_Load()) before it may be used.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 12.1" ),
            new TPMCommandDescription( 0x00000154, "TPM2_ECDH_ZGen", "Input:\n" +
                "  keyHandle - handle of a loaded ECC key Auth Index: 1 Auth Role: USER\n" +
                "  inPoint - a public key\n" +
                "\nOutput:\n" +
                "  outPoint - X and Y coordinates of the product of the multiplication Z = (xZ , yZ)  [hdS]QB\n" +
                "\nDescription:\n" +
                "  This command uses the TPM to recover the Z value from a public point (QB) and a private key (ds). It will perform the multiplication of the provided inPoint (QB) with the private key (ds) and return the coordinates of the resultant point (Z = (xZ , yZ)  [hds]QB; where h is the cofactor of the curve).\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 14.5" ),
            new TPMCommandDescription( 0x00000155, "TPM2_HMAC", "Input:\n" +
                "  handle - handle for the symmetric signing key providing the HMAC key Auth Index: 1 Auth Role: USER\n" +
                "  buffer - HMAC data\n" +
                "  hashAlg - algorithm to use for HMAC\n" +
                "\nOutput:\n" +
                "  outHMAC - the returned HMAC in a sized buffer\n" +
                "\nDescription:\n" +
                "  This command performs an HMAC on the supplied data using the indicated hash algorithm.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 15.4" ),
            new TPMCommandDescription( 0x00000156, "TPM2_Import", "Input:\n" +
                "  parentHandle - the handle of the new parent for the object Auth Index: 1 Auth Role: USER\n" +
                "  encryptionKey - the optional symmetric encryption key used as the inner wrapper for duplicate If symmetricAlg is TPM_ALG_NULL, then this parameter shall be the Empty Buffer.\n" +
                "  objectPublic - the public area of the object to be imported This is provided so that the integrity value for duplicate and the object attributes can be checked. NOTE	Even if the integrity value of the object is not checked on input, the object Name is required to create the integrity value for the imported object.\n" +
                "  duplicate - the symmetrically encrypted duplicate object that may contain an inner symmetric wrapper\n" +
                "  inSymSeed - symmetric key used to encrypt duplicate inSymSeed is encrypted/encoded using the algorithms of newParent.\n" +
                "  symmetricAlg - definition for the symmetric algorithm to use for the inner wrapper If this algorithm is TPM_ALG_NULL, no inner wrapper is present and encryptionKey shall be the Empty Buffer.\n" +
                "\nOutput:\n" +
                "  outPrivate - the sensitive area encrypted with the symmetric key of parentHandle\n" +
                "\nDescription:\n" +
                "  This command allows an object to be encrypted using the symmetric encryption values of a Storage Key. After encryption, the object may be loaded and used in the new hierarchy. The imported object (duplicate) may be singly encrypted, multiply encrypted, or unencrypted.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 13.3" ),
            new TPMCommandDescription( 0x00000157, "TPM2_Load", "Input:\n" +
                "  parentHandle - TPM handle of parent key; shall not be a reserved handle Auth Index: 1 Auth Role: USER\n" +
                "  inPrivate - the private portion of the object\n" +
                "  inPublic - the public portion of the object\n" +
                "\nOutput:\n" +
                "  objectHandle - handle of type TPM_HT_TRANSIENT for the loaded object\n" +
                "  name - Name of the loaded object\n" +
                "\nDescription:\n" +
                "  This command is used to load objects into the TPM. This command is used when both a TPM2B_PUBLIC and TPM2B_PRIVATE are to be loaded. If only a TPM2B_PUBLIC is to be loaded, the TPM2_LoadExternal command is used.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 12.2" ),
            new TPMCommandDescription( 0x00000158, "TPM2_Quote", "Input:\n" +
                "  signHandle - handle of key that will perform signature Auth Index: 1 Auth Role: USER\n" +
                "  qualifyingData - data supplied by the caller\n" +
                "  inScheme - signing scheme to use if the scheme for signHandle is TPM_ALG_NULL(One of SigSchemeRsassa, SigSchemeRsapss, SigSchemeEcdsa, SigSchemeEcdaa, SigSchemeSm2, SigSchemeEcschnorr, SchemeHmac, SchemeHash, NullSigScheme)\n" +
                "  PCRselect - PCR set to quote\n" +
                "\nOutput:\n" +
                "  quoted - the quoted information\n" +
                "  signature - the signature over quoted(One of SignatureRsassa, SignatureRsapss, SignatureEcdsa, SignatureEcdaa, SignatureSm2, SignatureEcschnorr, TpmHash, SchemeHash, NullSignature)\n" +
                "\nDescription:\n" +
                "  This command is used to quote PCR values.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 18.4" ),
            new TPMCommandDescription( 0x00000159, "TPM2_RSA_Decrypt", "Input:\n" +
                "  keyHandle - RSA key to use for decryption Auth Index: 1 Auth Role: USER\n" +
                "  cipherText - cipher text to be decrypted NOTE	An encrypted RSA data block is the size of the public modulus.\n" +
                "  inScheme - the padding scheme to use if scheme associated with keyHandle is TPM_ALG_NULL(One of KeySchemeEcdh, KeySchemeEcmqv, SigSchemeRsassa, SigSchemeRsapss, SigSchemeEcdsa, SigSchemeEcdaa, SigSchemeSm2, SigSchemeEcschnorr, EncSchemeRsaes, EncSchemeOaep, SchemeHash, NullAsymScheme)\n" +
                "  label - label whose association with the message is to be verified\n" +
                "\nOutput:\n" +
                "  message - decrypted output\n" +
                "\nDescription:\n" +
                "  This command performs RSA decryption using the indicated padding scheme according to IETF RFC 3447 ((PKCS#1).\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 14.3" ),
            new TPMCommandDescription( 0x0000015b, "TPM2_HMAC_Start", "Input:\n" +
                "  handle - handle of an HMAC key Auth Index: 1 Auth Role: USER\n" +
                "  auth - authorization value for subsequent use of the sequence\n" +
                "  hashAlg - the hash algorithm to use for the HMAC\n" +
                "\nOutput:\n" +
                "  sequenceHandle - a handle to reference the sequence\n" +
                "\nDescription:\n" +
                "  This command starts an HMAC sequence. The TPM will create and initialize an HMAC sequence structure, assign a handle to the sequence, and set the authValue of the sequence object to the value in auth.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 17.2" ),
            new TPMCommandDescription( 0x0000015c, "TPM2_SequenceUpdate", "Input:\n" +
                "  sequenceHandle - handle for the sequence object Auth Index: 1 Auth Role: USER\n" +
                "  buffer - data to be added to hash\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command is used to add data to a hash or HMAC sequence. The amount of data in buffer may be any size up to the limits of the TPM.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 17.4" ),
            new TPMCommandDescription( 0x0000015d, "TPM2_Sign", "Input:\n" +
                "  keyHandle - Handle of key that will perform signing Auth Index: 1 Auth Role: USER\n" +
                "  digest - digest to be signed\n" +
                "  inScheme - signing scheme to use if the scheme for keyHandle is TPM_ALG_NULL(One of SigSchemeRsassa, SigSchemeRsapss, SigSchemeEcdsa, SigSchemeEcdaa, SigSchemeSm2, SigSchemeEcschnorr, SchemeHmac, SchemeHash, NullSigScheme)\n" +
                "  validation - proof that digest was created by the TPM If keyHandle is not a restricted signing key, then this may be a NULL Ticket with tag = TPM_ST_CHECKHASH.\n" +
                "\nOutput:\n" +
                "  signature - the signature(One of SignatureRsassa, SignatureRsapss, SignatureEcdsa, SignatureEcdaa, SignatureSm2, SignatureEcschnorr, TpmHash, SchemeHash, NullSignature)\n" +
                "\nDescription:\n" +
                "  This command causes the TPM to sign an externally provided hash with the specified symmetric or asymmetric signing key.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 20.2" ),
            new TPMCommandDescription( 0x0000015e, "TPM2_Unseal", "Input:\n" +
                "  itemHandle - handle of a loaded data object Auth Index: 1 Auth Role: USER\n" +
                "\nOutput:\n" +
                "  outData - unsealed data Size of outData is limited to be no more than 128 octets.\n" +
                "\nDescription:\n" +
                "  This command returns the data in a loaded Sealed Data Object.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 12.7" ),
            new TPMCommandDescription( 0x00000160, "TPM2_PolicySigned", "Input:\n" +
                "  authObject - handle for a key that will validate the signature Auth Index: None\n" +
                "  policySession - handle for the policy session being extended Auth Index: None\n" +
                "  nonceTPM - the policy nonce for the session This can be the Empty Buffer.\n" +
                "  cpHashA - digest of the command parameters to which this authorization is limited This is not the cpHash for this command but the cpHash for the command to which this policy session will be applied. If it is not limited, the parameter will be the Empty Buffer.\n" +
                "  policyRef - a reference to a policy relating to the authorization  may be the Empty Buffer Size is limited to be no larger than the nonce size supported on the TPM.\n" +
                "  expiration - time when authorization will expire, measured in seconds from the time that nonceTPM was generated If expiration is non-negative, a NULL Ticket is returned. See 23.2.5.\n" +
                "  auth - signed authorization (not optional)(One of SignatureRsassa, SignatureRsapss, SignatureEcdsa, SignatureEcdaa, SignatureSm2, SignatureEcschnorr, TpmHash, SchemeHash, NullSignature)\n" +
                "\nOutput:\n" +
                "  timeout - implementation-specific time value, used to indicate to the TPM when the ticket expires NOTE	If policyTicket is a NULL Ticket, then this shall be the Empty Buffer.\n" +
                "  policyTicket - produced if the command succeeds and expiration in the command was non-zero; this ticket will use the TPMT_ST_AUTH_SIGNED structure tag. See 23.2.5\n" +
                "\nDescription:\n" +
                "  This command includes a signed authorization in a policy. The command ties the policy to a signing key by including the Name of the signing key in the policyDigest" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 23.3" ),
            new TPMCommandDescription( 0x00000161, "TPM2_ContextLoad", "Input:\n" +
                "  context - the context blob\n" +
                "\nOutput:\n" +
                "  loadedHandle - the handle assigned to the resource after it has been successfully loaded\n" +
                "\nDescription:\n" +
                "  This command is used to reload a context that has been saved by TPM2_ContextSave().\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 28.3" ),
            new TPMCommandDescription( 0x00000162, "TPM2_ContextSave", "Input:\n" +
                "  saveHandle - handle of the resource to save Auth Index: None\n" +
                "\nOutput:\n" +
                "  context - TPM2B_CONTEXT_SENSITIVE\n" +
                "\nDescription:\n" +
                "  This command saves a session context, object context, or sequence object context outside the TPM.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 28.2" ),
            new TPMCommandDescription( 0x00000163, "TPM2_ECDH_KeyGen", "Input:\n" +
                "  keyHandle - Handle of a loaded ECC key public area. Auth Index: None\n" +
                "\nOutput:\n" +
                "  zPoint - results of P  h[de]Qs\n" +
                "  pubPoint - generated ephemeral public point (Qe)\n" +
                "\nDescription:\n" +
                "  This command uses the TPM to generate an ephemeral key pair (de, Qe where Qe  [de]G). It uses the private ephemeral key and a loaded public key (QS) to compute the shared secret value (P  [hde]QS).\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 14.4" ),
            new TPMCommandDescription( 0x00000164, "TPM2_EncryptDecrypt", "Input:\n" +
                "  keyHandle - the symmetric key used for the operation Auth Index: 1 Auth Role: USER\n" +
                "  decrypt - if YES, then the operation is decryption; if NO, the operation is encryption\n" +
                "  mode - symmetric mode For a restricted key, this field shall match the default mode of the key or be TPM_ALG_NULL.\n" +
                "  ivIn - an initial value as required by the algorithm\n" +
                "  inData - the data to be encrypted/decrypted\n" +
                "\nOutput:\n" +
                "  outData - encrypted or decrypted output\n" +
                "  ivOut - chaining value to use for IV in next round\n" +
                "\nDescription:\n" +
                "  This command performs symmetric encryption or decryption.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 15.2" ),
            new TPMCommandDescription( 0x00000165, "TPM2_FlushContext", "Input:\n" +
                "  flushHandle - the handle of the item to flush NOTE	This is a use of a handle as a parameter.\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command causes all context associated with a loaded object, sequence object, or session to be removed from TPM memory.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 28.4" ),
            new TPMCommandDescription( 0x00000167, "TPM2_LoadExternal", "Input:\n" +
                "  inPrivate - the sensitive portion of the object (optional)\n" +
                "  inPublic - the public portion of the object\n" +
                "  hierarchy - hierarchy with which the object area is associated\n" +
                "\nOutput:\n" +
                "  objectHandle - handle of type TPM_HT_TRANSIENT for the loaded object\n" +
                "  name - name of the loaded object\n" +
                "\nDescription:\n" +
                "  This command is used to load an object that is not a Protected Object into the TPM. The command allows loading of a public area or both a public and sensitive area.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 12.3" ),
            new TPMCommandDescription( 0x00000168, "TPM2_MakeCredential", "Input:\n" +
                "  handle - loaded public area, used to encrypt the sensitive area containing the credential key Auth Index: None\n" +
                "  credential - the credential information\n" +
                "  objectName - Name of the object to which the credential applies\n" +
                "\nOutput:\n" +
                "  credentialBlob - the credential\n" +
                "  secret - handle algorithm-dependent data that wraps the key that encrypts credentialBlob\n" +
                "\nDescription:\n" +
                "  This command allows the TPM to perform the actions required of a Certificate Authority (CA) in creating a TPM2B_ID_OBJECT containing an activation credential.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 12.6" ),
            new TPMCommandDescription( 0x00000169, "TPM2_NV_ReadPublic", "Input:\n" +
                "  nvIndex - the NV Index Auth Index: None\n" +
                "\nOutput:\n" +
                "  nvPublic - the public area of the NV Index\n" +
                "  nvName - the Name of the nvIndex\n" +
                "\nDescription:\n" +
                "  This command is used to read the public area and Name of an NV Index. The public area of an Index is not privacy-sensitive and no authorization is required to read this data.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 31.6" ),
            new TPMCommandDescription( 0x0000016a, "TPM2_PolicyAuthorize", "Input:\n" +
                "  policySession - handle for the policy session being extended Auth Index: None\n" +
                "  approvedPolicy - digest of the policy being approved\n" +
                "  policyRef - a policy qualifier\n" +
                "  keySign - Name of a key that can sign a policy addition\n" +
                "  checkTicket - ticket validating that approvedPolicy and policyRef were signed by keySign\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command allows policies to change. If a policy were static, then it would be difficult to add users to a policy. This command lets a policy authority sign a new policy so that it may be used in an existing policy.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 23.16" ),
            new TPMCommandDescription( 0x0000016b, "TPM2_PolicyAuthValue", "Input:\n" +
                "  policySession - handle for the policy session being extended Auth Index: None\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command allows a policy to be bound to the authorization value of the authorized entity.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 23.17" ),
            new TPMCommandDescription( 0x0000016c, "TPM2_PolicyCommandCode", "Input:\n" +
                "  policySession - handle for the policy session being extended Auth Index: None\n" +
                "  code - the allowed commandCode\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command indicates that the authorization will be limited to a specific command code.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 23.11" ),
            new TPMCommandDescription( 0x0000016d, "TPM2_PolicyCounterTimer", "Input:\n" +
                "  policySession - handle for the policy session being extended Auth Index: None\n" +
                "  operandB - the second operand\n" +
                "  offset - the offset in TPMS_TIME_INFO structure for the start of operand A\n" +
                "  operation - the comparison to make\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command is used to cause conditional gating of a policy based on the contents of the TPMS_TIME_INFO structure.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 23.10" ),
            new TPMCommandDescription( 0x0000016e, "TPM2_PolicyCpHash", "Input:\n" +
                "  policySession - handle for the policy session being extended Auth Index: None\n" +
                "  cpHashA - the cpHash added to the policy\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command is used to allow a policy to be bound to a specific command and command parameters.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 23.13" ),
            new TPMCommandDescription( 0x0000016f, "TPM2_PolicyLocality", "Input:\n" +
                "  policySession - handle for the policy session being extended Auth Index: None\n" +
                "  locality - the allowed localities for the policy\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command indicates that the authorization will be limited to a specific locality.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 23.8" ),
            new TPMCommandDescription( 0x00000170, "TPM2_PolicyNameHash", "Input:\n" +
                "  policySession - handle for the policy session being extended Auth Index: None\n" +
                "  nameHash - the digest to be added to the policy\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command allows a policy to be bound to a specific set of TPM entities without being bound to the parameters of the command. This is most useful for commands such as TPM2_Duplicate() and for TPM2_PCR_Event() when the referenced PCR requires a policy.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 23.14" ),
            new TPMCommandDescription( 0x00000171, "TPM2_PolicyOR", "Input:\n" +
                "  policySession - handle for the policy session being extended Auth Index: None\n" +
                "  pHashList - the list of hashes to check for a match\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command allows options in authorizations without requiring that the TPM evaluate all of the options. If a policy may be satisfied by different sets of conditions, the TPM need only evaluate one set that satisfies the policy. This command will indicate that one of the required sets of conditions has been satisfied.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 23.6" ),
            new TPMCommandDescription( 0x00000172, "TPM2_PolicyTicket", "Input:\n" +
                "  policySession - handle for the policy session being extended Auth Index: None\n" +
                "  timeout - time when authorization will expire The contents are TPM specific. This shall be the value returned when ticket was produced.\n" +
                "  cpHashA - digest of the command parameters to which this authorization is limited If it is not limited, the parameter will be the Empty Buffer.\n" +
                "  policyRef - reference to a qualifier for the policy  may be the Empty Buffer\n" +
                "  authName - name of the object that provided the authorization\n" +
                "  ticket - an authorization ticket returned by the TPM in response to a TPM2_PolicySigned() or TPM2_PolicySecret()\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command is similar to TPM2_PolicySigned() except that it takes a ticket instead of a signed authorization. The ticket represents a validated authorization that had an expiration time associated with it.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 23.5" ),
            new TPMCommandDescription( 0x00000173, "TPM2_ReadPublic", "Input:\n" +
                "  objectHandle - TPM handle of an object Auth Index: None\n" +
                "\nOutput:\n" +
                "  outPublic - structure containing the public area of an object\n" +
                "  name - name of the object\n" +
                "  qualifiedName - the Qualified Name of the object\n" +
                "\nDescription:\n" +
                "  This command allows access to the public area of a loaded object.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 12.4" ),
            new TPMCommandDescription( 0x00000174, "TPM2_RSA_Encrypt", "Input:\n" +
                "  keyHandle - reference to public portion of RSA key to use for encryption Auth Index: None\n" +
                "  message - message to be encrypted NOTE 1	The data type was chosen because it limits the overall size of the input to no greater than the size of the largest RSA public key. This may be larger than allowed for keyHandle.\n" +
                "  inScheme - the padding scheme to use if scheme associated with keyHandle is TPM_ALG_NULL(One of KeySchemeEcdh, KeySchemeEcmqv, SigSchemeRsassa, SigSchemeRsapss, SigSchemeEcdsa, SigSchemeEcdaa, SigSchemeSm2, SigSchemeEcschnorr, EncSchemeRsaes, EncSchemeOaep, SchemeHash, NullAsymScheme)\n" +
                "  label - optional label L to be associated with the message Size of the buffer is zero if no label is present NOTE 2	See description of label above.\n" +
                "\nOutput:\n" +
                "  outData - encrypted output\n" +
                "\nDescription:\n" +
                "  This command performs RSA encryption using the indicated padding scheme according to IETF RFC 3447. If the scheme of keyHandle is TPM_ALG_NULL, then the caller may use inScheme to specify the padding scheme. If scheme of keyHandle is not TPM_ALG_NULL, then inScheme shall either be TPM_ALG_NULL or be the same as scheme (TPM_RC_SCHEME).\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 14.2" ),
            new TPMCommandDescription( 0x00000176, "TPM2_StartAuthSession", "Input:\n" +
                "  tpmKey - handle of a loaded decrypt key used to encrypt salt may be TPM_RH_NULL Auth Index: None\n" +
                "  bind - entity providing the authValue may be TPM_RH_NULL Auth Index: None\n" +
                "  nonceCaller - initial nonceCaller, sets nonce size for the session shall be at least 16 octets\n" +
                "  encryptedSalt - value encrypted according to the type of tpmKey If tpmKey is TPM_RH_NULL, this shall be the Empty Buffer.\n" +
                "  sessionType - indicates the type of the session; simple HMAC or policy (including a trial policy)\n" +
                "  symmetric - the algorithm and key size for parameter encryption may select TPM_ALG_NULL\n" +
                "  authHash - hash algorithm to use for the session Shall be a hash algorithm supported by the TPM and not TPM_ALG_NULL\n" +
                "\nOutput:\n" +
                "  sessionHandle - handle for the newly created session\n" +
                "  nonceTPM - the initial nonce from the TPM, used in the computation of the sessionKey\n" +
                "\nDescription:\n" +
                "  This command is used to start an authorization session using alternative methods of establishing the session key (sessionKey). The session key is then used to derive values used for authorization and for encrypting parameters.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 11.1" ),
            new TPMCommandDescription( 0x00000177, "TPM2_VerifySignature", "Input:\n" +
                "  keyHandle - handle of public key that will be used in the validation Auth Index: None\n" +
                "  digest - digest of the signed message\n" +
                "  signature - signature to be tested(One of SignatureRsassa, SignatureRsapss, SignatureEcdsa, SignatureEcdaa, SignatureSm2, SignatureEcschnorr, TpmHash, SchemeHash, NullSignature)\n" +
                "\nOutput:\n" +
                "  validation - TPMT_TK_VERIFIED\n" +
                "\nDescription:\n" +
                "  This command uses loaded keys to validate a signature on a message with the message digest passed to the TPM.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 20.1" ),
            new TPMCommandDescription( 0x00000178, "TPM2_ECC_Parameters", "Input:\n" +
                "  curveID - parameter set selector\n" +
                "\nOutput:\n" +
                "  parameters - ECC parameters for the selected curve\n" +
                "\nDescription:\n" +
                "  This command returns the parameters of an ECC curve identified by its TCG-assigned curveID.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 14.6" ),
            new TPMCommandDescription( 0x00000179, "TPM2_FirmwareRead", "Input:\n" +
                "  sequenceNumber - the number of previous calls to this command in this sequence set to 0 on the first call\n" +
                "\nOutput:\n" +
                "  fuData - field upgrade image data\n" +
                "\nDescription:\n" +
                "  This command is used to read a copy of the current firmware installed in the TPM.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 27.4" ),
            new TPMCommandDescription( 0x0000017a, "TPM2_GetCapability", "Input:\n" +
                "  capability - group selection; determines the format of the response\n" +
                "  property - further definition of information\n" +
                "  propertyCount - number of properties of the indicated type to return\n" +
                "\nOutput:\n" +
                "  moreData - flag to indicate if there are more values of this type\n" +
                "  capabilityData - the capability data(One of AlgPropertyArray, HandleArray, CcaArray, CcArray, CcArray, PcrSelectionArray, TaggedTpmPropertyArray, TaggedPcrPropertyArray, EccCurveArray)\n" +
                "\nDescription:\n" +
                "  This command returns various information regarding the TPM and its current state.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 30.2" ),
            new TPMCommandDescription( 0x0000017b, "TPM2_GetRandom", "Input:\n" +
                "  bytesRequested - number of octets to return\n" +
                "\nOutput:\n" +
                "  randomBytes - the random octets\n" +
                "\nDescription:\n" +
                "  This command returns the next bytesRequested octets from the random number generator (RNG).\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 16.1" ),
            new TPMCommandDescription( 0x0000017c, "TPM2_GetTestResult", "Input:\n" +
                "  None.\n" +
                "\nOutput:\n" +
                "  outData - test result data contains manufacturer-specific information\n" +
                "  testResult - status of testing.\n" +
                "\nDescription:\n" +
                "  This command returns manufacturer-specific information regarding the results of a self-test and an indication of the test status.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 10.4" ),
            new TPMCommandDescription( 0x0000017d, "TPM2_Hash", "Input:\n" +
                "  data - data to be hashed\n" +
                "  hashAlg - algorithm for the hash being computed  shall not be TPM_ALG_NULL\n" +
                "  hierarchy - hierarchy to use for the ticket (TPM_RH_NULL allowed)\n" +
                "\nOutput:\n" +
                "  outHash - results\n" +
                "  validation - ticket indicating that the sequence of octets used to compute outDigest did not start with TPM_GENERATED_VALUE will be a NULL ticket if the digest may not be signed with a restricted key\n" +
                "\nDescription:\n" +
                "  This command performs a hash operation on a data buffer and returns the results.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 15.3" ),
            new TPMCommandDescription( 0x0000017e, "TPM2_PCR_Read", "Input:\n" +
                "  pcrSelectionIn - The selection of PCR to read\n" +
                "\nOutput:\n" +
                "  pcrUpdateCounter - the current value of the PCR update counter\n" +
                "  pcrSelectionOut - the PCR in the returned list\n" +
                "  pcrValues - the contents of the PCR indicated in pcrSelect as tagged digests\n" +
                "\nDescription:\n" +
                "  This command returns the values of all PCR specified in pcrSelectionIn.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 22.4" ),
            new TPMCommandDescription( 0x0000017f, "TPM2_PolicyPCR", "Input:\n" +
                "  policySession - handle for the policy session being extended Auth Index: None\n" +
                "  pcrDigest - expected digest value of the selected PCR using the hash algorithm of the session; may be zero length\n" +
                "  pcrs - the PCR to include in the check digest\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command is used to cause conditional gating of a policy based on PCR. This command together with TPM2_PolicyOR() allows one group of authorizations to occur when PCR are in one state and a different set of authorizations when the PCR are in a different state. If this command is used for a trial policySession, policySessionpolicyDigest will be updated using the values from the command rather than the values from digest of the TPM PCR.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 23.7" ),
            new TPMCommandDescription( 0x00000180, "TPM2_PolicyRestart", "Input:\n" +
                "  sessionHandle - the handle for the policy session\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command allows a policy authorization session to be returned to its initial state. This command is used after the TPM returns TPM_RC_PCR_CHANGED. That response code indicates that a policy will fail because the PCR have changed after TPM2_PolicyPCR() was executed. Restarting the session allows the authorizations to be replayed because the session restarts with the same nonceTPM. If the PCR are valid for the policy, the policy may then succeed.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 11.2" ),
            new TPMCommandDescription( 0x00000181, "TPM2_ReadClock", "Input:\n" +
                "  None.\n" +
                "\nOutput:\n" +
                "  currentTime - TPMS_TIME_INFO\n" +
                "\nDescription:\n" +
                "  This command reads the current TPMS_TIME_INFO structure that contains the current setting of Time, Clock, resetCount, and restartCount.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 29.1" ),
            new TPMCommandDescription( 0x00000182, "TPM2_PCR_Extend", "Input:\n" +
                "  pcrHandle - handle of the PCR Auth Handle: 1 Auth Role: USER\n" +
                "  digests - list of tagged digest values to be extended\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command is used to cause an update to the indicated PCR. The digests parameter contains one or more tagged digest values identified by an algorithm ID. For each digest, the PCR associated with pcrHandle is Extended into the bank identified by the tag (hashAlg).\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 22.2" ),
            new TPMCommandDescription( 0x00000183, "TPM2_PCR_SetAuthValue", "Input:\n" +
                "  pcrHandle - handle for a PCR that may have an authorization value set Auth Index: 1 Auth Role: USER\n" +
                "  auth - the desired authorization value\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command changes the authValue of a PCR or group of PCR.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 22.7" ),
            new TPMCommandDescription( 0x00000184, "TPM2_NV_Certify", "Input:\n" +
                "  signHandle - handle of the key used to sign the attestation structure Auth Index: 1 Auth Role: USER\n" +
                "  authHandle - handle indicating the source of the authorization value for the NV Index Auth Index: 2 Auth Role: USER\n" +
                "  nvIndex - Index for the area to be certified Auth Index: None\n" +
                "  qualifyingData - user-provided qualifying data\n" +
                "  inScheme - signing scheme to use if the scheme for signHandle is TPM_ALG_NULL(One of SigSchemeRsassa, SigSchemeRsapss, SigSchemeEcdsa, SigSchemeEcdaa, SigSchemeSm2, SigSchemeEcschnorr, SchemeHmac, SchemeHash, NullSigScheme)\n" +
                "  size - number of octets to certify\n" +
                "  offset - octet offset into the area This value shall be less than or equal to the size of the nvIndex data.\n" +
                "\nOutput:\n" +
                "  certifyInfo - the structure that was signed\n" +
                "  signature - the asymmetric signature over certifyInfo using the key referenced by signHandle(One of SignatureRsassa, SignatureRsapss, SignatureEcdsa, SignatureEcdaa, SignatureSm2, SignatureEcschnorr, TpmHash, SchemeHash, NullSignature)\n" +
                "\nDescription:\n" +
                "  The purpose of this command is to certify the contents of an NV Index or portion of an NV Index.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 31.16" ),
            new TPMCommandDescription( 0x00000185, "TPM2_EventSequenceComplete", "Input:\n" +
                "  pcrHandle - PCR to be extended with the Event data Auth Index: 1 Auth Role: USER\n" +
                "  sequenceHandle - authorization for the sequence Auth Index: 2 Auth Role: USER\n" +
                "  buffer - data to be added to the Event\n" +
                "\nOutput:\n" +
                "  results - list of digests computed for the PCR\n" +
                "\nDescription:\n" +
                "  This command adds the last part of data, if any, to an Event Sequence and returns the result in a digest list. If pcrHandle references a PCR and not TPM_RH_NULL, then the returned digest list is processed in the same manner as the digest list input parameter to TPM2_PCR_Extend() with the pcrHandle in each bank extended with the associated digest value.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 17.6" ),
            new TPMCommandDescription( 0x00000186, "TPM2_HashSequenceStart", "Input:\n" +
                "  auth - authorization value for subsequent use of the sequence\n" +
                "  hashAlg - the hash algorithm to use for the hash sequence An Event Sequence starts if this is TPM_ALG_NULL.\n" +
                "\nOutput:\n" +
                "  sequenceHandle - a handle to reference the sequence\n" +
                "\nDescription:\n" +
                "  This command starts a hash or an Event Sequence. If hashAlg is an implemented hash, then a hash sequence is started. If hashAlg is TPM_ALG_NULL, then an Event Sequence is started. If hashAlg is neither an implemented algorithm nor TPM_ALG_NULL, then the TPM shall return TPM_RC_HASH.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 17.3" ),
            new TPMCommandDescription( 0x00000187, "TPM2_PolicyPhysicalPresence", "Input:\n" +
                "  policySession - handle for the policy session being extended Auth Index: None\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command indicates that physical presence will need to be asserted at the time the authorization is performed.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 23.12" ),
            new TPMCommandDescription( 0x00000188, "TPM2_PolicyDuplicationSelect", "Input:\n" +
                "  policySession - handle for the policy session being extended Auth Index: None\n" +
                "  objectName - the Name of the object to be duplicated\n" +
                "  newParentName - the Name of the new parent\n" +
                "  includeObject - if YES, the objectName will be included in the value in policySessionpolicyDigest\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command allows qualification of duplication to allow duplication to a selected new parent.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 23.15" ),
            new TPMCommandDescription( 0x00000189, "TPM2_PolicyGetDigest", "Input:\n" +
                "  policySession - handle for the policy session Auth Index: None\n" +
                "\nOutput:\n" +
                "  policyDigest - the current value of the policySessionpolicyDigest\n" +
                "\nDescription:\n" +
                "  This command returns the current policyDigest of the session. This command allows the TPM to be used to perform the actions required to pre-compute the authPolicy for an object.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 23.19" ),
            new TPMCommandDescription( 0x0000018a, "TPM2_TestParms", "Input:\n" +
                "  parameters - algorithm parameters to be validated(One of KeyedhashParms, SymcipherParms, RsaParms, EccParms, AsymParms)\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command is used to check to see if specific combinations of algorithm parameters are supported.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 30.3" ),
            new TPMCommandDescription( 0x0000018b, "TPM2_Commit", "Input:\n" +
                "  signHandle - handle of the key that will be used in the signing operation Auth Index: 1 Auth Role: USER\n" +
                "  P1 - a point (M) on the curve used by signHandle\n" +
                "  s2 - octet array used to derive x-coordinate of a base point\n" +
                "  y2 - y coordinate of the point associated with s2\n" +
                "\nOutput:\n" +
                "  K - ECC point K  [ds](x2, y2)\n" +
                "  L - ECC point L  [r](x2, y2)\n" +
                "  E - ECC point E  [r]P1\n" +
                "  counter - least-significant 16 bits of commitCount\n" +
                "\nDescription:\n" +
                "  TPM2_Commit() performs the first part of an ECC anonymous signing operation. The TPM will perform the point multiplications on the provided points and return intermediate signing values. The signHandle parameter shall refer to an ECC key with the sign attribute (TPM_RC_ATTRIBUTES) and the signing scheme must be anonymous (TPM_RC_SCHEME). Currently, TPM_ALG_ECDAA is the only defined anonymous scheme.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 19.2" ),
            new TPMCommandDescription( 0x0000018c, "TPM2_PolicyPassword", "Input:\n" +
                "  policySession - handle for the policy session being extended Auth Index: None\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command allows a policy to be bound to the authorization value of the authorized object.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 23.18" ),
            new TPMCommandDescription( 0x0000018d, "TPM2_ZGen_2Phase", "Input:\n" +
                "  keyA - handle of an unrestricted decryption key ECC The private key referenced by this handle is used as dS,A Auth Index: 1 Auth Role: USER\n" +
                "  inQsB - other partys static public key (Qs,B = (Xs,B, Ys,B))\n" +
                "  inQeB - other party's ephemeral public key (Qe,B = (Xe,B, Ye,B))\n" +
                "  inScheme - the key exchange scheme\n" +
                "  counter - value returned by TPM2_EC_Ephemeral()\n" +
                "\nOutput:\n" +
                "  outZ1 - X and Y coordinates of the computed value (scheme dependent)\n" +
                "  outZ2 - X and Y coordinates of the second computed value (scheme dependent)\n" +
                "\nDescription:\n" +
                "  This command supports two-phase key exchange protocols. The command is used in combination with TPM2_EC_Ephemeral(). TPM2_EC_Ephemeral() generates an ephemeral key and returns the public point of that ephemeral key along with a numeric value that allows the TPM to regenerate the associated private key.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 14.7" ),
            new TPMCommandDescription( 0x0000018e, "TPM2_EC_Ephemeral", "Input:\n" +
                "  curveID - The curve for the computed ephemeral point\n" +
                "\nOutput:\n" +
                "  Q - ephemeral public key Q  [r]G\n" +
                "  counter - least-significant 16 bits of commitCount\n" +
                "\nDescription:\n" +
                "  TPM2_EC_Ephemeral() creates an ephemeral key for use in a two-phase key exchange protocol.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 19.3" ),
            new TPMCommandDescription( 0x0000018f, "TPM2_PolicyNvWritten", "Input:\n" +
                "  policySession - handle for the policy session being extended Auth Index: None\n" +
                "  writtenSet - YES if NV Index is required to have been written NO if NV Index is required not to have been written\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command allows a policy to be bound to the TPMA_NV_WRITTEN attributes. This is a deferred assertion. Values are stored in the policy session context and checked when the policy is used for authorization.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.16, Part 3, Section 23.20" ),
            new TPMCommandDescription( 0x00000190, "TPM2_PolicyTemplate", "Input:\n" +
                "  templateHash - the digest to be added to the policy\n" +
                "\nOutput:\n" +
                "  None." +
                "\nDescription:\n" +
                "  This command allows a policy to be bound to a specific creation template. This is most useful for an object creation command such as TPM2_Create(), TPM2_CreatePrimary(), or TPM2_CreateLoaded()." +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.38, Part 3, Section 23.21" ),
            new TPMCommandDescription( 0x00000191, "TPM2_CreateLoaded", "Input:\n" +
                "  parentHandle - Handle of a transient storage key, a persistent storage key, TPM_RH_ENDORSEMENT, TPM_RH_OWNER, TPM_RH_PLATFORM+{PP}, or TPM_RH_NULL Auth Index: 1 Auth Role: USER\n" +
                "  inSensitive - the sensitive data, see TPM 2.0 Part 1 Sensitive Values\n" +
                "  inPublic - the public template\n" +
                "\nOutput:\n" +
                "  outPrivate - the sensitive area of the object (optional)\n" +
                "  outPublic - the public portion of the created object\n" +
                "  name - the name of the created object\n" +
                "\nDescription:\n" +
                "  This command creates an object and loads it in the TPM. This command allows creation of any type of object (Primary, Ordinary, or Derived) depending on the type of parentHandle. If parentHandle references a Primary Seed, then a Primary Object is created; if parentHandle references a Storage Parent, then an Ordinary Object is created; and if parentHandle references a Derivation Parent, then a Derived Object is generated." +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.38, Part 3, Section 12.9" ),
            new TPMCommandDescription( 0x00000192, "TPM2_PolicyAuthorizeNV", "Input:\n" +
                "  authHandle - handle indicating the source of the authorization value Auth Index: 1 Auth Role: USER\n" +
                "  nvIndex - the NV Index of the area to read Auth Index: None\n" +
                "  policySession - handle for the policy session being extended Auth Index: None\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command provides a capability that is the equivalent of a revocable policy. With TPM2_PolicyAuthorize(), the authorization ticket never expires, so the authorization may not be withdrawn. With this command, the approved policy is kept in an NV Index location so that the policy may be changed as needed to render the old policy unusable.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.38, Part 3, Section 23.22" ),
            new TPMCommandDescription( 0x00000193, "TPM2_EncryptDecrypt2", "Input:\n" +
                "  keyHandle - the symmetric key used for the operation Auth Index: 1 Auth Role: USER\n" +
                "  inData - the data to be encrypted/decrypted\n" +
                "  decrypt - if YES, then the operation is decryption; if NO, the operation is encryption\n" +
                "  mode - symmetric mode this field shall match the default mode of the key or be TPM_ALG_NULL.\n" +
                "  ivIn - an initial value as required by the algorithm\n" +
                "\nOutput:\n" +
                "  outData - encrypted or decrypted output\n" +
                "  ivOut - chaining value to use for IV in next round\n" +
                "\nDescription:\n" +
                "  This command is identical to TPM2_EncryptDecrypt(), except that the inData parameter is the first parameter. This permits inData to be parameter encrypted.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.38, Part 3, Section 15.3" ),
            new TPMCommandDescription( 0x00000194, "TPM2_AC_GetCapability", "Input:\n" +
                "  ac - handle indicating the Attached Component. Auth Index: None\n" +
                "  capability - starting info type\n" +
                "  count - maximum number of values to return\n" +
                "\nOutput:\n" +
                "  moreData - flag to indicate whether there are more values\n" +
                "  capabilitiesData - list of capabilities\n" +
                "\nDescription:\n" +
                "  The purpose of this command is to obtain information about an Attached Component referenced by an AC handle.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.62, Part 3, Section 31.2" ),
            new TPMCommandDescription( 0x00000195, "TPM2_AC_Send", "Input:\n" +
                "  sendObject - handle of the object being sent to ac. Auth Index: 1. Auth Role: DUP\n" +
                "  authHandle - the handle indicating the source of the authorization value. Auth Index: 2. Auth Role: USER\n" +
                "  ac - handle indicating the Attached Component to which the object will be sent. Auth Index: None\n" +
                "  acDataIn - Optional non sensitive information related to the object\n" +
                "\nOutput:\n" +
                "  acDataOut - May include AC specific data or information about an error.\n" +
                "\nDescription:\n" +
                "  The purpose of this command is to send (copy) a loaded object from the TPM to an Attached Component.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.62, Part 3, Section 31.3" ),
            new TPMCommandDescription( 0x00000196, "TPM2_Policy_AC_SendSelect", "Input:\n" +
                "  policySession - handle for the policy session being extended. Auth Index: None\n" +
                "  objectName - the Name of the Object to be sent\n" +
                "  authHandleName - the Name associated with authHandle used in the TPM2_AC_Send() command\n" +
                "  acName - the Name of the Attached Component to which the Object will be sent\n" +
                "  includeObject - if SET, objectName will be included in the value in policySession→policyDigest\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command allows qualification of the sending (copying) of an Object to an Attached Component (AC). Qualification includes selection of the receiving AC and the method of authentication for the AC, and, in certain circumstances, the Object to be sent may be specified.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.62, Part 3, Section 31.4" ),
            new TPMCommandDescription( 0x00000197, "TPM2_CertifyX509", "Input:\n" +
                "  objectHandle - handle of the object to be certified. Auth Index: 1. Auth Role: ADMIN\n" +
                "  signHandle - handle of the key used to sign the attestation structure. Auth Index: 2. Auth Role: USER\n" +
                "  reserved - shall be an Empty Buffer\n" +
                "  inScheme - signing scheme to use if the scheme for signHandle is TPM_ALG_NULL\n" +
                "  partialCertificate - a DER encoded partial certificate\n" +
                "\nOutput:\n" +
                "  addedToCertificate - a DER encoded SEQUENCE containing the DER encoded fields added to partialCertificate to make it a complete RFC5280 TBSCertificate.\n" +
                "  tbsDigest - the digest that was signed\n" +
                "  signature - The signature over tbsDigest\n" +
                "\nDescription:\n" +
                "  The purpose of this command is to generate an X.509 certificate that proves an object with a specific public key and attributes is loaded in the TPM. In contrast to TPM2_Certify, which uses a TCG-defined data structure to convey attestation information, TPM2_CertifyX509 encodes the attestation information in a DER-encoded X.509 certificate that is compliant with RFC5280 Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.62, Part 3, Section 17.8" ),
            new TPMCommandDescription( 0x00000198, "TPM2_ACT_SetTimeout", "Input:\n" +
                "  actHandle - Handle of the selected ACT. Auth Index: 1. Auth Role: USER\n" +
                "  startTimeout - the start timeout value for the ACT in seconds\n" +
                "\nOutput:\n" +
                "  None.\n" +
                "\nDescription:\n" +
                "  This command is used to set the time remaining before an Authenticated Countdown Timer (ACT) expires.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.62, Part 3, Section 33.2" ),
            new TPMCommandDescription( 0x00000199, "TPM2_ECC_Encrypt", "Input:\n" +
                "  keyHandle - Reference to public portion of ECC key to use for encryption. Auth Index: None\n" +
                "  plainText - Plaintext to be encrypted.\n" +
                "  inScheme - the KDF to use if scheme associated with keyHandle is TPM_ALG_NULL.\n" +
                "\nOutput:\n" +
                "  C1 - the public ephemeral key used for ECDH\n" +
                "  C2 - the data block produced by the XOR process\n" +
                "  C3 - the integrity value\n" +
                "\nDescription:\n" +
                "  This command performs ECC encryption as described in Part 1, Annex D.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.62, Part 3, Section 14.8" ),
            new TPMCommandDescription( 0x0000019a, "TPM2_ECC_Decrypt", "Input:\n" +
                "  keyHandle - ECC key to use for decryption. Auth Index: 1. Auth Role: USER\n" +
                "  C1 - the public ephemeral key used for ECDH\n" +
                "  C2 - the data block produced by the XOR process\n" +
                "  C3 - the integrity value\n" +
                "  inScheme - the KDF to use if scheme associated with keyHandle is TPM_ALG_NULL\n" +
                "\nOutput:\n" +
                "  plainText - decrypted output.\n" +
                "\nDescription:\n" +
                "  This command performs ECC decryption.\n" +
                "\nReference:\n" +
                "  TPM 2.0 Library Specification Revision 1.59, Part 3, Section 14.9" ),
        };

        public class CommandDescriptionComparer : IComparer<TPMCommandDescription>
        {
            public int Compare(TPMCommandDescription left, TPMCommandDescription right)
            {
                return left.Name.CompareTo(right.Name);
            }
        }

        public CommandCodes()
        {
            this.InitializeComponent();
            this.m_NavigationHelper = new NavigationHelper(this);
            this.m_NavigationHelper.LoadState += LoadState;
            this.m_NavigationHelper.SaveState += SaveState;

            Array.Sort(m_TPM12Commands, new CommandDescriptionComparer());
            Array.Sort(m_TPM20Commands, new CommandDescriptionComparer());

            ListOfCommands.SelectionChanged -= ListOfCommands_SelectionChanged;
            ListOfCommands.Items.Clear();
            // TPM 1.2
            foreach (TPMCommandDescription descr in m_TPM12Commands)
            {
                ListOfCommands.Items.Add(descr.Name);
            }
            // TPM 2.0
            foreach (TPMCommandDescription descr in m_TPM20Commands)
            {
                ListOfCommands.Items.Add(descr.Name);
            }
            ListOfCommands.SelectionChanged += ListOfCommands_SelectionChanged;

            CommandCode.Text = "";
            Description.Text = m_DefaultDescription;

        }

        private void SetIndex(int index, UInt32 commandCode, string commandName, string description)
        {
            bool setNotification = ListOfCommands.SelectedIndex != index;
            if (setNotification)
                ListOfCommands.SelectionChanged -= ListOfCommands_SelectionChanged;
            ListOfCommands.SelectedIndex = index;
            Description.Text = string.Format("{0} (0x{1:x})\n\n", commandName, commandCode) + description;
            if (setNotification)
                ListOfCommands.SelectionChanged += ListOfCommands_SelectionChanged;
        }

        private void CommandCode_TextChanged(object sender, TextChangedEventArgs e)
        {
            string inStr = CommandCode.Text.Trim();
            uint commandCode = ~0u;
            if (inStr.StartsWith("0x", StringComparison.CurrentCultureIgnoreCase))
            {
                try
                {
                    commandCode = UInt32.Parse(inStr.Substring(2).Trim(), NumberStyles.HexNumber);
                }
                catch (FormatException)
                { }
            }
            else
            {
                try
                {
                    commandCode = UInt32.Parse(inStr, NumberStyles.Integer);
                }
                catch (FormatException)
                { }
            }
            if (commandCode == ~0u)
            {
                SetIndex(-1, 0, "", m_InvalidCommandDescription);
                return;
            }

            // TPM 1.2
            int index = 0;
            foreach (TPMCommandDescription descr in m_TPM12Commands)
            {
                if (commandCode == descr.Ordinal)
                {
                    SetIndex(index, descr.Ordinal, descr.Name, descr.Description);
                    return;
                }
                index++;
            }
            // TPM 2.0
            foreach (TPMCommandDescription descr in m_TPM20Commands)
            {
                if (commandCode == descr.Ordinal)
                {
                    SetIndex(index, descr.Ordinal, descr.Name, descr.Description);
                    return;
                }
                index++;
            }

            // no matching command found, set defaults
            SetIndex(-1, 0, "", m_InvalidCommandDescription);
        }

        private void ListOfCommands_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ListOfCommands.SelectedIndex == -1)
            {
                return;
            }

            uint commandCode = ~0u;
            string description = "";
            string commandName = "";
            if (ListOfCommands.SelectedIndex < m_TPM12Commands.Length)
            {
                // TPM 1.2
                commandCode = m_TPM12Commands[ListOfCommands.SelectedIndex].Ordinal;
                description = m_TPM12Commands[ListOfCommands.SelectedIndex].Description;
                commandName = m_TPM12Commands[ListOfCommands.SelectedIndex].Name;
            }
            else if (ListOfCommands.SelectedIndex - m_TPM12Commands.Length < m_TPM20Commands.Length)
            {
                // TPM 2.0
                commandCode = m_TPM20Commands[ListOfCommands.SelectedIndex - m_TPM12Commands.Length].Ordinal;
                description = m_TPM20Commands[ListOfCommands.SelectedIndex - m_TPM12Commands.Length].Description;
                commandName = m_TPM20Commands[ListOfCommands.SelectedIndex - m_TPM12Commands.Length].Name;
            }

            CommandCode.TextChanged -= CommandCode_TextChanged;
            CommandCode.Text = string.Format("0x{0:x}", commandCode);
            Description.Text = string.Format("{0} (0x{1:x})\n\n", commandName, commandCode) + description;
            CommandCode.TextChanged += CommandCode_TextChanged;
        }

        #region Save and Restore state

        /// <summary>
        /// Populates the page with content passed during navigation. Any saved state is also
        /// provided when recreating a page from a prior session.
        /// </summary>
        /// <param name="sender">
        /// The source of the event; typically <see cref="NavigationHelper"/>.
        /// </param>
        /// <param name="e">Event data that provides both the navigation parameter passed to
        /// <see cref="Frame.Navigate(Type, Object)"/> when this page was initially requested and
        /// a dictionary of state preserved by this page during an earlier
        /// session. The state will be null the first time a page is visited.</param>
        private void LoadState(object sender, LoadStateEventArgs e)
        {
            if (SuspensionManager.SessionState.ContainsKey(m_SettingCommandCode))
            {
                CommandCode.Text = (string)SuspensionManager.SessionState[m_SettingCommandCode];
                // ListOfCommands is automatically set by CommandCode's OnChanged method
                // Description is automatically set by CommandCode's OnChanged method
            }
        }

        /// <summary>
        /// Preserves state associated with this page in case the application is suspended or the
        /// page is discarded from the navigation cache. Values must conform to the serialization
        /// requirements of <see cref="SuspensionManager.SessionState"/>.
        /// </summary>
        /// <param name="sender">The source of the event; typically <see cref="NavigationHelper"/>.</param>
        /// <param name="e">Event data that provides an empty dictionary to be populated with
        /// serializable state.</param>
        private void SaveState(object sender, SaveStateEventArgs e)
        {
            SuspensionManager.SessionState[m_SettingCommandCode] = CommandCode.Text;
        }

        #endregion

        #region NavigationHelper registration

        /// <summary>
        /// The methods provided in this section are simply used to allow
        /// NavigationHelper to respond to the page's navigation methods.
        /// <para>
        /// Page specific logic should be placed in event handlers for the  
        /// <see cref="NavigationHelper.LoadState"/>
        /// and <see cref="NavigationHelper.SaveState"/>.
        /// The navigation parameter is available in the LoadState method 
        /// in addition to page state preserved during an earlier session.
        /// </para>
        /// </summary>
        /// <param name="e">Provides data for navigation methods and event
        /// handlers that cannot cancel the navigation request.</param>
        /// 
        protected override void OnNavigatedTo(NavigationEventArgs e)
        {
            this.m_NavigationHelper.OnNavigatedTo(e);
        }

        protected override void OnNavigatedFrom(NavigationEventArgs e)
        {
            this.m_NavigationHelper.OnNavigatedFrom(e);
        }

        #endregion
    }
}
